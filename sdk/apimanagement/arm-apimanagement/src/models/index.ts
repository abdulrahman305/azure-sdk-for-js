/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Base Properties of an API Management gateway resource description. */
export interface ApiManagementGatewayBaseProperties {
  /**
   * The current provisioning state of the API Management gateway which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management gateway, which is targeted by the long running operation started on the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management gateway.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAtUtc?: Date;
  /** Information regarding how the gateway should be exposed. */
  frontend?: FrontendConfiguration;
  /** Information regarding how the gateway should integrate with backend systems. */
  backend?: BackendConfiguration;
  /** Information regarding the Configuration API of the API Management gateway. This is only applicable for API gateway with Standard SKU. */
  configurationApi?: GatewayConfigurationApi;
  /** The type of VPN in which API Management gateway needs to be configured in. */
  virtualNetworkType?: VirtualNetworkType;
}

/** Information regarding how the gateway should be exposed. */
export interface FrontendConfiguration {
  /**
   * The default hostname of the data-plane gateway to which requests can be sent. This is only applicable for API gateway with Standard SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultHostname?: string;
}

/** Information regarding how the gateway should integrate with backend systems. */
export interface BackendConfiguration {
  /** The default hostname of the data-plane gateway to which requests can be sent. */
  subnet?: BackendSubnetConfiguration;
}

/** Information regarding how the subnet to which the gateway should be injected. */
export interface BackendSubnetConfiguration {
  /** The ARM ID of the subnet in which the backend systems are hosted. */
  id?: string;
}

/** Information regarding the Configuration API of the API Management gateway. This is only applicable for API gateway with Standard SKU. */
export interface GatewayConfigurationApi {
  /**
   * Hostname to which the agent connects to propagate configuration to the cloud.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hostname?: string;
}

/** API Management gateway resource SKU properties. */
export interface ApiManagementGatewaySkuProperties {
  /** Name of the Sku. */
  name: ApiGatewaySkuType;
  /** Capacity of the SKU (number of deployed units of the SKU) */
  capacity?: number;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The Resource definition. */
export interface ApimResource {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type for API Management resource is set to Microsoft.ApiManagement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** API Management gateway resource SKU properties for PATCH operations given nothing should be required. */
export interface ApiManagementGatewaySkuPropertiesForPatch {
  /** Name of the Sku. */
  name?: ApiGatewaySkuType;
  /** Capacity of the SKU (number of deployed units of the SKU) */
  capacity?: number;
}

/** The response of the List API Management gateway operation. */
export interface ApiManagementGatewayListResult {
  /** Result of the List API Management gateway operation. */
  value: ApiManagementGatewayResource[];
  /** Link to the next set of results. Not empty if Value contains incomplete list of API Management services. */
  nextLink?: string;
}

/** The API Management gateway SKUs operation response. */
export interface GatewayResourceSkuResults {
  /** The list of skus available for the gateway. */
  value: GatewayResourceSkuResult[];
  /** The uri to fetch the next page of API Management gateway Skus. */
  nextLink?: string;
}

/** Describes an available API Management gateway SKU. */
export interface GatewayResourceSkuResult {
  /**
   * The type of resource the SKU applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * Specifies API Management gateway SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: GatewaySku;
  /**
   * Specifies the number of API Management gateway units.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacity?: GatewaySkuCapacity;
}

/** Describes an available API Management SKU for gateways. */
export interface GatewaySku {
  /** Name of the Sku. */
  name?: ApiGatewaySkuType;
}

/** Describes scaling information of a SKU. */
export interface GatewaySkuCapacity {
  /**
   * The minimum capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scaleType?: GatewaySkuCapacityScaleType;
}

/** The response of All Policies. */
export interface AllPoliciesCollection {
  /** AllPolicies Contract value. */
  value?: AllPoliciesContract[];
  /** Next page link if any. */
  nextLink?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Paged API list representation. */
export interface ApiCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ApiContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** An API Version Set contains the common configuration for a set of API Versions relating */
export interface ApiVersionSetContractDetails {
  /** Identifier for existing API Version Set. Omit this value to create a new Version Set. */
  id?: string;
  /** The display Name of the API Version Set. */
  name?: string;
  /** Description of API Version Set. */
  description?: string;
  /** An value that determines where the API Version identifier will be located in a HTTP request. */
  versioningScheme?: ApiVersionSetContractDetailsVersioningScheme;
  /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
  versionQueryName?: string;
  /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
  versionHeaderName?: string;
}

/** API base contract details. */
export interface ApiEntityBaseContract {
  /** Description of the API. May include HTML formatting tags. */
  description?: string;
  /** Collection of authentication settings included into this API. */
  authenticationSettings?: AuthenticationSettingsContract;
  /** Protocols over which API is made available. */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /** Type of API. */
  apiType?: ApiType;
  /** Describes the revision of the API. If no value is provided, default revision 1 is created */
  apiRevision?: string;
  /** Indicates the version identifier of the API if the API is versioned */
  apiVersion?: string;
  /** Indicates if API revision is current api revision. */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isOnline?: boolean;
  /** Description of the API Revision. */
  apiRevisionDescription?: string;
  /** Description of the API Version. */
  apiVersionDescription?: string;
  /** A resource identifier for the related ApiVersionSet. */
  apiVersionSetId?: string;
  /** Specifies whether an API or Product subscription is required for accessing the API. */
  subscriptionRequired?: boolean;
  /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
  termsOfServiceUrl?: string;
  /** Contact information for the API. */
  contact?: ApiContactInformation;
  /** License information for the API. */
  license?: ApiLicenseInformation;
}

/** API Authentication Settings. */
export interface AuthenticationSettingsContract {
  /** OAuth2 Authentication settings */
  oAuth2?: OAuth2AuthenticationSettingsContract;
  /** OpenID Connect Authentication Settings */
  openid?: OpenIdAuthenticationSettingsContract;
  /** Collection of OAuth2 authentication settings included into this API. */
  oAuth2AuthenticationSettings?: OAuth2AuthenticationSettingsContract[];
  /** Collection of Open ID Connect authentication settings included into this API. */
  openidAuthenticationSettings?: OpenIdAuthenticationSettingsContract[];
}

/** API OAuth2 Authentication settings details. */
export interface OAuth2AuthenticationSettingsContract {
  /** OAuth authorization server identifier. */
  authorizationServerId?: string;
  /** operations scope. */
  scope?: string;
}

/** API OAuth2 Authentication settings details. */
export interface OpenIdAuthenticationSettingsContract {
  /** OAuth authorization server identifier. */
  openidProviderId?: string;
  /** How to send token to the server. */
  bearerTokenSendingMethods?: BearerTokenSendingMethods[];
}

/** Subscription key parameter names details. */
export interface SubscriptionKeyParameterNamesContract {
  /** Subscription key header name. */
  header?: string;
  /** Subscription key query string parameter name. */
  query?: string;
}

/** API contact information */
export interface ApiContactInformation {
  /** The identifying name of the contact person/organization */
  name?: string;
  /** The URL pointing to the contact information. MUST be in the format of a URL */
  url?: string;
  /** The email address of the contact person/organization. MUST be in the format of an email address */
  email?: string;
}

/** API license information */
export interface ApiLicenseInformation {
  /** The license name used for the API */
  name?: string;
  /** A URL to the license used for the API. MUST be in the format of a URL */
  url?: string;
}

/** API Create or Update Parameters. */
export interface ApiCreateOrUpdateParameter {
  /** Description of the API. May include HTML formatting tags. */
  description?: string;
  /** Collection of authentication settings included into this API. */
  authenticationSettings?: AuthenticationSettingsContract;
  /** Protocols over which API is made available. */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /** Type of API. */
  apiType?: ApiType;
  /** Describes the revision of the API. If no value is provided, default revision 1 is created */
  apiRevision?: string;
  /** Indicates the version identifier of the API if the API is versioned */
  apiVersion?: string;
  /** Indicates if API revision is current api revision. */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isOnline?: boolean;
  /** Description of the API Revision. */
  apiRevisionDescription?: string;
  /** Description of the API Version. */
  apiVersionDescription?: string;
  /** A resource identifier for the related ApiVersionSet. */
  apiVersionSetId?: string;
  /** Specifies whether an API or Product subscription is required for accessing the API. */
  subscriptionRequired?: boolean;
  /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
  termsOfServiceUrl?: string;
  /** Contact information for the API. */
  contact?: ApiContactInformation;
  /** License information for the API. */
  license?: ApiLicenseInformation;
  /** API identifier of the source API. */
  sourceApiId?: string;
  /** API name. Must be 1 to 300 characters long. */
  displayName?: string;
  /** Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long. */
  serviceUrl?: string;
  /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
  path?: string;
  /** Describes on which protocols the operations in this API can be invoked. */
  protocols?: Protocol[];
  /** Version set details */
  apiVersionSet?: ApiVersionSetContractDetails;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Content value when Importing an API. */
  value?: string;
  /** Format of the Content in which the API is getting imported. New formats can be added in the future */
  format?: ContentFormat;
  /** Criteria to limit import of WSDL to a subset of the document. */
  wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
  /**
   * Type of API to create.
   *  * `http` creates a REST API
   *  * `soap` creates a SOAP pass-through API
   *  * `websocket` creates websocket API
   *  * `graphql` creates GraphQL API.
   *  New types can be added in the future.
   */
  soapApiType?: SoapApiType;
  /** Strategy of translating required query parameters to template ones. By default has value 'template'. Possible values: 'template', 'query' */
  translateRequiredQueryParametersConduct?: TranslateRequiredQueryParametersConduct;
}

/** Criteria to limit import of WSDL to a subset of the document. */
export interface ApiCreateOrUpdatePropertiesWsdlSelector {
  /** Name of service to import from WSDL */
  wsdlServiceName?: string;
  /** Name of endpoint(port) to import from WSDL */
  wsdlEndpointName?: string;
}

/** API update contract details. */
export interface ApiUpdateContract {
  /** Description of the API. May include HTML formatting tags. */
  description?: string;
  /** Collection of authentication settings included into this API. */
  authenticationSettings?: AuthenticationSettingsContract;
  /** Protocols over which API is made available. */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /** Type of API. */
  apiType?: ApiType;
  /** Describes the revision of the API. If no value is provided, default revision 1 is created */
  apiRevision?: string;
  /** Indicates the version identifier of the API if the API is versioned */
  apiVersion?: string;
  /** Indicates if API revision is current api revision. */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isOnline?: boolean;
  /** Description of the API Revision. */
  apiRevisionDescription?: string;
  /** Description of the API Version. */
  apiVersionDescription?: string;
  /** A resource identifier for the related ApiVersionSet. */
  apiVersionSetId?: string;
  /** Specifies whether an API or Product subscription is required for accessing the API. */
  subscriptionRequired?: boolean;
  /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
  termsOfServiceUrl?: string;
  /** Contact information for the API. */
  contact?: ApiContactInformation;
  /** License information for the API. */
  license?: ApiLicenseInformation;
  /** API name. */
  displayName?: string;
  /** Absolute URL of the backend service implementing this API. */
  serviceUrl?: string;
  /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
  path?: string;
  /** Describes on which protocols the operations in this API can be invoked. */
  protocols?: Protocol[];
}

/** Paged API Revision list representation. */
export interface ApiRevisionCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ApiRevisionContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Summary of revision metadata. */
export interface ApiRevisionContract {
  /**
   * Identifier of the API Revision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiId?: string;
  /**
   * Revision number of API.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiRevision?: string;
  /**
   * The time the API Revision was created. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDateTime?: Date;
  /**
   * The time the API Revision were updated. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedDateTime?: Date;
  /**
   * Description of the API Revision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Gateway URL for accessing the non-current API Revision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateUrl?: string;
  /**
   * Indicates if API revision is the current api revision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isOnline?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isCurrent?: boolean;
}

/** Paged ApiRelease list representation. */
export interface ApiReleaseCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ApiReleaseContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged Operation list representation. */
export interface OperationCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: OperationContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** API Operation Entity Base Contract details. */
export interface OperationEntityBaseContract {
  /** Collection of URL template parameters. */
  templateParameters?: ParameterContract[];
  /** Description of the operation. May include HTML formatting tags. */
  description?: string;
  /** An entity containing request details. */
  request?: RequestContract;
  /** Array of Operation responses. */
  responses?: ResponseContract[];
  /** Operation Policies */
  policies?: string;
}

/** Operation parameters details. */
export interface ParameterContract {
  /** Parameter name. */
  name: string;
  /** Parameter description. */
  description?: string;
  /** Parameter type. */
  type: string;
  /** Default parameter value. */
  defaultValue?: string;
  /** Specifies whether parameter is required or not. */
  required?: boolean;
  /** Parameter values. */
  values?: string[];
  /** Schema identifier. */
  schemaId?: string;
  /** Type name defined by the schema. */
  typeName?: string;
  /** Exampled defined for the parameter. */
  examples?: { [propertyName: string]: ParameterExampleContract };
}

/** Parameter example. */
export interface ParameterExampleContract {
  /** Short description for the example */
  summary?: string;
  /** Long description for the example */
  description?: string;
  /** Example value. May be a primitive value, or an object. */
  value?: any;
  /** A URL that points to the literal example */
  externalValue?: string;
}

/** Operation request details. */
export interface RequestContract {
  /** Operation request description. */
  description?: string;
  /** Collection of operation request query parameters. */
  queryParameters?: ParameterContract[];
  /** Collection of operation request headers. */
  headers?: ParameterContract[];
  /** Collection of operation request representations. */
  representations?: RepresentationContract[];
}

/** Operation request/response representation details. */
export interface RepresentationContract {
  /** Specifies a registered or custom content type for this representation, e.g. application/xml. */
  contentType: string;
  /** Schema identifier. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'. */
  schemaId?: string;
  /** Type name defined by the schema. Applicable only if 'contentType' value is neither 'application/x-www-form-urlencoded' nor 'multipart/form-data'. */
  typeName?: string;
  /** Collection of form parameters. Required if 'contentType' value is either 'application/x-www-form-urlencoded' or 'multipart/form-data'.. */
  formParameters?: ParameterContract[];
  /** Exampled defined for the representation. */
  examples?: { [propertyName: string]: ParameterExampleContract };
}

/** Operation response details. */
export interface ResponseContract {
  /** Operation response HTTP status code. */
  statusCode: number;
  /** Operation response description. */
  description?: string;
  /** Collection of operation response representations. */
  representations?: RepresentationContract[];
  /** Collection of operation response headers. */
  headers?: ParameterContract[];
}

/** API Operation Update Contract details. */
export interface OperationUpdateContract {
  /** Collection of URL template parameters. */
  templateParameters?: ParameterContract[];
  /** Description of the operation. May include HTML formatting tags. */
  description?: string;
  /** An entity containing request details. */
  request?: RequestContract;
  /** Array of Operation responses. */
  responses?: ResponseContract[];
  /** Operation Policies */
  policies?: string;
  /** Operation Name. */
  displayName?: string;
  /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
  method?: string;
  /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
  urlTemplate?: string;
}

/** The response of the list policy operation. */
export interface PolicyCollection {
  /** Policy Contract value. */
  value?: PolicyContract[];
  /** Total record count number. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Tag list representation. */
export interface TagCollection {
  /** Page values. */
  value?: TagContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Resolver list representation. */
export interface ResolverCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ResolverContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** GraphQL API Resolver Update Contract details. */
export interface ResolverUpdateContract {
  /** Resolver Name. */
  displayName?: string;
  /** Path is type/field being resolved. */
  path?: string;
  /** Description of the resolver. May include HTML formatting tags. */
  description?: string;
}

/** Paged Products list representation. */
export interface ProductCollection {
  /** Page values. */
  value?: ProductContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Product Entity Base Parameters */
export interface ProductEntityBaseParameters {
  /** Product description. May include HTML formatting tags. */
  description?: string;
  /** Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process. */
  terms?: string;
  /** Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true. */
  subscriptionRequired?: boolean;
  /** whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false. */
  approvalRequired?: boolean;
  /** Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false. */
  subscriptionsLimit?: number;
  /** whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. */
  state?: ProductState;
}

/** The response of the list schema operation. */
export interface SchemaCollection {
  /**
   * API Schema Contract value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: SchemaContract[];
  /** Total record count number. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged Diagnostic list representation. */
export interface DiagnosticCollection {
  /** Page values. */
  value?: DiagnosticContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Sampling settings for Diagnostic. */
export interface SamplingSettings {
  /** Sampling type. */
  samplingType?: SamplingType;
  /** Rate of sampling for fixed-rate sampling. */
  percentage?: number;
}

/** Diagnostic settings for incoming/outgoing HTTP messages to the Gateway. */
export interface PipelineDiagnosticSettings {
  /** Diagnostic settings for request. */
  request?: HttpMessageDiagnostic;
  /** Diagnostic settings for response. */
  response?: HttpMessageDiagnostic;
}

/** Http message diagnostic settings. */
export interface HttpMessageDiagnostic {
  /** Array of HTTP Headers to log. */
  headers?: string[];
  /** Body logging settings. */
  body?: BodyDiagnosticSettings;
  /** Data masking settings. */
  dataMasking?: DataMasking;
}

/** Body logging settings. */
export interface BodyDiagnosticSettings {
  /** Number of request body bytes to log. */
  bytes?: number;
}

export interface DataMasking {
  /** Masking settings for Url query parameters */
  queryParams?: DataMaskingEntity[];
  /** Masking settings for headers */
  headers?: DataMaskingEntity[];
}

export interface DataMaskingEntity {
  /** The name of an entity to mask (e.g. a name of a header or a query parameter). */
  value?: string;
  /** Data masking mode. */
  mode?: DataMaskingMode;
}

/** Paged Issue list representation. */
export interface IssueCollection {
  /**
   * Issue values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: IssueContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Issue contract Base Properties. */
export interface IssueContractBaseProperties {
  /** Date and time when the issue was created. */
  createdDate?: Date;
  /** Status of the issue. */
  state?: State;
  /** A resource identifier for the API the issue was created for. */
  apiId?: string;
}

/** Issue update Parameters. */
export interface IssueUpdateContract {
  /** Date and time when the issue was created. */
  createdDate?: Date;
  /** Status of the issue. */
  state?: State;
  /** A resource identifier for the API the issue was created for. */
  apiId?: string;
  /** The issue title. */
  title?: string;
  /** Text describing the issue. */
  description?: string;
  /** A resource identifier for the user created the issue. */
  userId?: string;
}

/** Paged Issue Comment list representation. */
export interface IssueCommentCollection {
  /**
   * Issue Comment values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: IssueCommentContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged Issue Attachment list representation. */
export interface IssueAttachmentCollection {
  /**
   * Issue Attachment values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: IssueAttachmentContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged TagDescription list representation. */
export interface TagDescriptionCollection {
  /** Page values. */
  value?: TagDescriptionContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Parameters supplied to the Create TagDescription operation. */
export interface TagDescriptionBaseProperties {
  /** Description of the Tag. */
  description?: string;
  /** Absolute URL of external resources describing the tag. */
  externalDocsUrl?: string;
  /** Description of the external resources describing the tag. */
  externalDocsDescription?: string;
}

/** Parameters supplied to the Create TagDescription operation. */
export interface TagDescriptionCreateParameters {
  /** Description of the Tag. */
  description?: string;
  /** Absolute URL of external resources describing the tag. */
  externalDocsUrl?: string;
  /** Description of the external resources describing the tag. */
  externalDocsDescription?: string;
}

/** Paged Tag list representation. */
export interface TagResourceCollection {
  /** Page values. */
  value?: TagResourceContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** TagResource contract properties. */
export interface TagResourceContract {
  /** Tag associated with the resource. */
  tag: TagResourceContractProperties;
  /** API associated with the tag. */
  api?: ApiTagResourceContractProperties;
  /** Operation associated with the tag. */
  operation?: OperationTagResourceContractProperties;
  /** Product associated with the tag. */
  product?: ProductTagResourceContractProperties;
}

/** Contract defining the Tag property in the Tag Resource Contract */
export interface TagResourceContractProperties {
  /** Tag identifier */
  id?: string;
  /** Tag Name */
  name?: string;
}

/** Operation Entity contract Properties. */
export interface OperationTagResourceContractProperties {
  /** Identifier of the operation in form /operations/{operationId}. */
  id?: string;
  /**
   * Operation name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * API Name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiName?: string;
  /**
   * API Revision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiRevision?: string;
  /**
   * API Version.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiVersion?: string;
  /**
   * Operation Description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly method?: string;
  /**
   * Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly urlTemplate?: string;
}

/** Wiki documentation details. */
export interface WikiDocumentationContract {
  /** Documentation Identifier */
  documentationId?: string;
}

/** Wiki update contract details. */
export interface WikiUpdateContract {
  /** Collection wiki documents included into this wiki. */
  documents?: WikiDocumentationContract[];
}

/** Paged Wiki list representation. */
export interface WikiCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: WikiContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** API Export result. */
export interface ApiExportResult {
  /** ResourceId of the API which was exported. */
  id?: string;
  /** Format in which the API Details are exported to the Storage Blob with Sas Key valid for 5 minutes. */
  exportResultFormat?: ExportResultFormat;
  /** The object defining the schema of the exported API Detail */
  value?: ApiExportResultValue;
}

/** The object defining the schema of the exported API Detail */
export interface ApiExportResultValue {
  /** Link to the Storage Blob containing the result of the export operation. The Blob Uri is only valid for 5 minutes. */
  link?: string;
}

/** Paged API Version Set list representation. */
export interface ApiVersionSetCollection {
  /** Page values. */
  value?: ApiVersionSetContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** API Version set base parameters */
export interface ApiVersionSetEntityBase {
  /** Description of API Version Set. */
  description?: string;
  /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
  versionQueryName?: string;
  /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
  versionHeaderName?: string;
}

/** Parameters to update or create an API Version Set Contract. */
export interface ApiVersionSetUpdateParameters {
  /** Description of API Version Set. */
  description?: string;
  /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
  versionQueryName?: string;
  /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
  versionHeaderName?: string;
  /** Name of API Version Set */
  displayName?: string;
  /** An value that determines where the API Version identifier will be located in a HTTP request. */
  versioningScheme?: VersioningScheme;
}

/** Paged Authorization Provider list representation. */
export interface AuthorizationProviderCollection {
  /** Page values. */
  value?: AuthorizationProviderContract[];
  /** Next page link if any. */
  nextLink?: string;
}

/** OAuth2 settings details */
export interface AuthorizationProviderOAuth2Settings {
  /** Redirect URL to be set in the OAuth application. */
  redirectUrl?: string;
  /** OAuth2 settings */
  grantTypes?: AuthorizationProviderOAuth2GrantTypes;
}

/** Authorization Provider oauth2 grant types settings */
export interface AuthorizationProviderOAuth2GrantTypes {
  /** OAuth2 authorization code grant parameters */
  authorizationCode?: { [propertyName: string]: string };
  /** OAuth2 client credential grant parameters */
  clientCredentials?: { [propertyName: string]: string };
}

/** Paged Authorization list representation. */
export interface AuthorizationCollection {
  /** Page values. */
  value?: AuthorizationContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Authorization error details. */
export interface AuthorizationError {
  /** Error code */
  code?: string;
  /** Error message */
  message?: string;
}

/** Authorization login request contract. */
export interface AuthorizationLoginRequestContract {
  /** The redirect URL after login has completed. */
  postLoginRedirectUrl?: string;
}

/** Authorization login response contract. */
export interface AuthorizationLoginResponseContract {
  /** The login link */
  loginLink?: string;
}

/** Authorization confirm consent code request contract. */
export interface AuthorizationConfirmConsentCodeRequestContract {
  /** The consent code from the authorization server after authorizing and consenting. */
  consentCode?: string;
}

/** Paged Authorization Access Policy list representation. */
export interface AuthorizationAccessPolicyCollection {
  /** Page values. */
  value?: AuthorizationAccessPolicyContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged OAuth2 Authorization Servers list representation. */
export interface AuthorizationServerCollection {
  /** Page values. */
  value?: AuthorizationServerContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** External OAuth authorization server Update settings contract. */
export interface AuthorizationServerContractBaseProperties {
  /** Description of the authorization server. Can contain HTML formatting tags. */
  description?: string;
  /** HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. */
  authorizationMethods?: AuthorizationMethod[];
  /** Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /** Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}. */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /** OAuth token endpoint. Contains absolute URI to entity being referenced. */
  tokenEndpoint?: string;
  /** If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security. */
  supportState?: boolean;
  /** Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values. */
  defaultScope?: string;
  /** Specifies the mechanism by which access token is passed to the API. */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
  resourceOwnerUsername?: string;
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
  resourceOwnerPassword?: string;
}

/** OAuth acquire token request body parameter (www-url-form-encoded). */
export interface TokenBodyParameterContract {
  /** body parameter name. */
  name: string;
  /** body parameter value. */
  value: string;
}

/** OAuth Server Secrets Contract. */
export interface AuthorizationServerSecretsContract {
  /** oAuth Authorization Server Secrets. */
  clientSecret?: string;
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
  resourceOwnerUsername?: string;
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
  resourceOwnerPassword?: string;
}

/** Paged Backend list representation. */
export interface BackendCollection {
  /** Backend values. */
  value?: BackendContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Backend entity base Parameter set. */
export interface BackendBaseParameters {
  /** Backend Title. */
  title?: string;
  /** Backend Description. */
  description?: string;
  /** Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps. */
  resourceId?: string;
  /** Backend Properties contract */
  properties?: BackendProperties;
  /** Backend Credentials Contract Properties */
  credentials?: BackendCredentialsContract;
  /** Backend gateway Contract Properties */
  proxy?: BackendProxyContract;
  /** Backend TLS Properties */
  tls?: BackendTlsProperties;
  /** Backend Circuit Breaker Configuration */
  circuitBreaker?: BackendCircuitBreaker;
  pool?: BackendBaseParametersPool;
  /** Type of the backend. A backend can be either Single or Pool. */
  type?: BackendType;
}

/** Properties specific to the Backend Type. */
export interface BackendProperties {
  /** Backend Service Fabric Cluster Properties */
  serviceFabricCluster?: BackendServiceFabricClusterProperties;
}

/** Properties of the Service Fabric Type Backend. */
export interface BackendServiceFabricClusterProperties {
  /** The client certificate id for the management endpoint. */
  clientCertificateId?: string;
  /** The client certificate thumbprint for the management endpoint. Will be ignored if certificatesIds are provided */
  clientCertificatethumbprint?: string;
  /** Maximum number of retries while attempting resolve the partition. */
  maxPartitionResolutionRetries?: number;
  /** The cluster management endpoint. */
  managementEndpoints: string[];
  /** Thumbprints of certificates cluster management service uses for tls communication */
  serverCertificateThumbprints?: string[];
  /** Server X509 Certificate Names Collection */
  serverX509Names?: X509CertificateName[];
}

/** Properties of server X509Names. */
export interface X509CertificateName {
  /** Common Name of the Certificate. */
  name?: string;
  /** Thumbprint for the Issuer of the Certificate. */
  issuerCertificateThumbprint?: string;
}

/** Details of the Credentials used to connect to Backend. */
export interface BackendCredentialsContract {
  /** List of Client Certificate Ids. */
  certificateIds?: string[];
  /** List of Client Certificate Thumbprints. Will be ignored if certificatesIds are provided. */
  certificate?: string[];
  /** Query Parameter description. */
  query?: { [propertyName: string]: string[] };
  /** Header Parameter description. */
  header?: { [propertyName: string]: string[] };
  /** Authorization header authentication */
  authorization?: BackendAuthorizationHeaderCredentials;
}

/** Authorization header information. */
export interface BackendAuthorizationHeaderCredentials {
  /** Authentication Scheme name. */
  scheme: string;
  /** Authentication Parameter value. */
  parameter: string;
}

/** Details of the Backend WebProxy Server to use in the Request to Backend. */
export interface BackendProxyContract {
  /** WebProxy Server AbsoluteUri property which includes the entire URI stored in the Uri instance, including all fragments and query strings. */
  url: string;
  /** Username to connect to the WebProxy server */
  username?: string;
  /** Password to connect to the WebProxy Server */
  password?: string;
}

/** Properties controlling TLS Certificate Validation. */
export interface BackendTlsProperties {
  /** Flag indicating whether SSL certificate chain validation should be done when using self-signed certificates for this backend host. */
  validateCertificateChain?: boolean;
  /** Flag indicating whether SSL certificate name validation should be done when using self-signed certificates for this backend host. */
  validateCertificateName?: boolean;
}

/** The configuration of the backend circuit breaker */
export interface BackendCircuitBreaker {
  /** The rules for tripping the backend. */
  rules?: CircuitBreakerRule[];
}

/** Rule configuration to trip the backend. */
export interface CircuitBreakerRule {
  /** The rule name. */
  name?: string;
  /** The conditions for tripping the circuit breaker. */
  failureCondition?: CircuitBreakerFailureCondition;
  /** The duration for which the circuit will be tripped. */
  tripDuration?: string;
  /** flag to accept Retry-After header from the backend. */
  acceptRetryAfter?: boolean;
}

/** The trip conditions of the circuit breaker */
export interface CircuitBreakerFailureCondition {
  /** The threshold for opening the circuit. */
  count?: number;
  /** The threshold for opening the circuit. */
  percentage?: number;
  /** The interval during which the failures are counted. */
  interval?: string;
  /** The status code ranges which are considered as failure. */
  statusCodeRanges?: FailureStatusCodeRange[];
  /** The error reasons which are considered as failure. */
  errorReasons?: string[];
}

/** The failure http status code range */
export interface FailureStatusCodeRange {
  /** The minimum http status code. */
  min?: number;
  /** The maximum http status code. */
  max?: number;
}

/** Backend pool information */
export interface BackendPool {
  /** The list of backend entities belonging to a pool. */
  services?: BackendPoolItem[];
}

/** Backend pool service information */
export interface BackendPoolItem {
  /** The unique ARM id of the backend entity. The ARM id should refer to an already existing backend entity. */
  id: string;
  /** The weight of the backend entity in the backend pool. Must be between 0 and 100. It can be also null if the value not specified. */
  weight?: number;
  /** The priority of the backend entity in the backend pool. Must be between 0 and 100. It can be also null if the value not specified. */
  priority?: number;
}

/** Backend update parameters. */
export interface BackendUpdateParameters {
  /** Backend Title. */
  title?: string;
  /** Backend Description. */
  description?: string;
  /** Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps. */
  resourceId?: string;
  /** Backend Properties contract */
  properties?: BackendProperties;
  /** Backend Credentials Contract Properties */
  credentials?: BackendCredentialsContract;
  /** Backend gateway Contract Properties */
  proxy?: BackendProxyContract;
  /** Backend TLS Properties */
  tls?: BackendTlsProperties;
  /** Backend Circuit Breaker Configuration */
  circuitBreaker?: BackendCircuitBreaker;
  pool?: BackendBaseParametersPool;
  /** Type of the backend. A backend can be either Single or Pool. */
  type?: BackendType;
  /** Runtime Url of the Backend. */
  url?: string;
  /** Backend communication protocol. */
  protocol?: BackendProtocol;
}

/** Paged Caches list representation. */
export interface CacheCollection {
  /** Page values. */
  value?: CacheContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Cache update details. */
export interface CacheUpdateParameters {
  /** Cache description */
  description?: string;
  /** Runtime connection string to cache */
  connectionString?: string;
  /** Location identifier to use cache from (should be either 'default' or valid Azure region identifier) */
  useFromLocation?: string;
  /** Original uri of entity in external system cache points to */
  resourceId?: string;
}

/** Paged Certificates list representation. */
export interface CertificateCollection {
  /** Page values. */
  value?: CertificateContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Issue contract Update Properties. */
export interface KeyVaultLastAccessStatusContractProperties {
  /** Last status code for sync and refresh of secret from key vault. */
  code?: string;
  /** Details of the error else empty. */
  message?: string;
  /**
   * Last time secret was accessed. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  timeStampUtc?: Date;
}

/** Create keyVault contract details. */
export interface KeyVaultContractCreateProperties {
  /** Key vault secret identifier for fetching secret. Providing a versioned secret will prevent auto-refresh. This requires API Management service to be configured with aka.ms/apimmsi */
  secretIdentifier?: string;
  /** Null for SystemAssignedIdentity or Client Id for UserAssignedIdentity , which will be used to access key vault secret. */
  identityClientId?: string;
}

/** Certificate create or update details. */
export interface CertificateCreateOrUpdateParameters {
  /** Base 64 encoded certificate using the application/x-pkcs12 representation. */
  data?: string;
  /** Password for the Certificate */
  password?: string;
  /** KeyVault location details of the certificate. */
  keyVault?: KeyVaultContractCreateProperties;
}

/** A request to perform the connectivity check operation on a API Management service. */
export interface ConnectivityCheckRequest {
  /** Definitions about the connectivity check origin. */
  source: ConnectivityCheckRequestSource;
  /** The connectivity check operation destination. */
  destination: ConnectivityCheckRequestDestination;
  /** The IP version to be used. Only IPv4 is supported for now. */
  preferredIPVersion?: PreferredIPVersion;
  /** The request's protocol. Specific protocol configuration can be available based on this selection. The specified destination address must be coherent with this value. */
  protocol?: ConnectivityCheckProtocol;
  /** Protocol-specific configuration. */
  protocolConfiguration?: ConnectivityCheckRequestProtocolConfiguration;
}

/** Definitions about the connectivity check origin. */
export interface ConnectivityCheckRequestSource {
  /** The API Management service region from where to start the connectivity check operation. */
  region: string;
  /** The particular VMSS instance from which to fire the request. */
  instance?: number;
}

/** The connectivity check operation destination. */
export interface ConnectivityCheckRequestDestination {
  /** Destination address. Can either be an IP address or a FQDN. */
  address: string;
  /** Destination port. */
  port: number;
}

/** Protocol-specific configuration. */
export interface ConnectivityCheckRequestProtocolConfiguration {
  /** Configuration for HTTP or HTTPS requests. */
  httpConfiguration?: ConnectivityCheckRequestProtocolConfigurationHttpConfiguration;
}

/** Configuration for HTTP or HTTPS requests. */
export interface ConnectivityCheckRequestProtocolConfigurationHttpConfiguration {
  /** The HTTP method to be used. */
  method?: Method;
  /** List of HTTP status codes considered valid for the request response. */
  validStatusCodes?: number[];
  /** List of headers to be included in the request. */
  headers?: HttpHeader[];
}

/** HTTP header and it's value. */
export interface HttpHeader {
  /** Header name. */
  name: string;
  /** Header value. */
  value: string;
}

/** Information on the connectivity status. */
export interface ConnectivityCheckResponse {
  /**
   * List of hops between the source and the destination.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hops?: ConnectivityHop[];
  /**
   * The connection status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectionStatus?: ConnectionStatus;
  /**
   * Average latency in milliseconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly avgLatencyInMs?: number;
  /**
   * Minimum latency in milliseconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minLatencyInMs?: number;
  /**
   * Maximum latency in milliseconds.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxLatencyInMs?: number;
  /**
   * Total number of probes sent.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly probesSent?: number;
  /**
   * Number of failed probes.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly probesFailed?: number;
}

/** Information about a hop between the source and the destination. */
export interface ConnectivityHop {
  /**
   * The type of the hop.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The ID of the hop.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The IP address of the hop.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly address?: string;
  /**
   * The ID of the resource corresponding to this hop.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /**
   * List of next hop identifiers.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextHopIds?: string[];
  /**
   * List of issues.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly issues?: ConnectivityIssue[];
}

/** Information about an issue encountered in the process of checking for connectivity. */
export interface ConnectivityIssue {
  /**
   * The origin of the issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * The severity of the issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly severity?: Severity;
  /**
   * The type of issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: IssueType;
  /**
   * Provides additional context on the issue.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly context?: { [propertyName: string]: string }[];
}

/** Paged list of content types. */
export interface ContentTypeCollection {
  /**
   * Collection of content types.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ContentTypeContract[];
  /**
   * Next page link, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged list of content items. */
export interface ContentItemCollection {
  /**
   * Collection of content items.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ContentItemContract[];
  /**
   * Next page link, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged deleted API Management Services List Representation. */
export interface DeletedServicesCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DeletedServiceContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Result of the request to list REST API operations. It contains a list of operations and a URL nextLink to get the next set of results. */
export interface OperationListResult {
  /** List of operations supported by the resource provider. */
  value?: Operation[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** REST API operation */
export interface Operation {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that describes the operation. */
  display?: OperationDisplay;
  /** The operation origin. */
  origin?: string;
  /** The operation properties. */
  properties?: Record<string, unknown>;
}

/** The object that describes the operation. */
export interface OperationDisplay {
  /** Friendly name of the resource provider */
  provider?: string;
  /** Operation type: read, write, delete, listKeys/action, etc. */
  operation?: string;
  /** Resource type on which the operation is performed. */
  resource?: string;
  /** Friendly name of the operation */
  description?: string;
}

/** The API Management service SKUs operation response. */
export interface ResourceSkuResults {
  /** The list of skus available for the service. */
  value: ResourceSkuResult[];
  /** The uri to fetch the next page of API Management service Skus. */
  nextLink?: string;
}

/** Describes an available API Management service SKU. */
export interface ResourceSkuResult {
  /**
   * The type of resource the SKU applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * Specifies API Management SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: ResourceSku;
  /**
   * Specifies the number of API Management units.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacity?: ResourceSkuCapacity;
}

/** Describes an available API Management SKU. */
export interface ResourceSku {
  /** Name of the Sku. */
  name?: SkuType;
}

/** Describes scaling information of a SKU. */
export interface ResourceSkuCapacity {
  /**
   * The minimum capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scaleType?: ResourceSkuCapacityScaleType;
}

/** Parameters supplied to the Backup/Restore of an API Management service operation. */
export interface ApiManagementServiceBackupRestoreParameters {
  /** The name of the Azure storage account (used to place/retrieve the backup). */
  storageAccount: string;
  /** The name of the blob container (used to place/retrieve the backup). */
  containerName: string;
  /** The name of the backup file to create/retrieve. */
  backupName: string;
  /** The type of access to be used for the storage account. */
  accessType?: AccessType;
  /** Storage account access key. Required only if `accessType` is set to `AccessKey`. */
  accessKey?: string;
  /** The Client ID of user assigned managed identity. Required only if `accessType` is set to `UserAssignedManagedIdentity`. */
  clientId?: string;
}

/** Base Properties of an API Management service resource description. */
export interface ApiManagementServiceBaseProperties {
  /** Email address from which the notification will be sent. */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scmUrl?: string;
  /**
   * DEveloper Portal endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly developerPortalUrl?: string;
  /** Custom hostname configuration of the API Management service. */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateIPAddresses?: string[];
  /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the region. Supported only for Developer and Premium SKU being deployed in Virtual Network. */
  publicIpAddressId?: string;
  /** Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Configuration API configuration of the API Management service. */
  configurationApi?: ConfigurationApi;
  /** Virtual network configuration of the API Management service. */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /** Additional datacenter locations of the API Management service. */
  additionalLocations?: AdditionalLocation[];
  /** Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1, 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of the following ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.</br> Note: The following ciphers can't be disabled since they are required by internal platform components: TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 */
  customProperties?: { [propertyName: string]: string };
  /** List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10. */
  certificates?: CertificateConfiguration[];
  /** Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway. */
  enableClientCertificate?: boolean;
  /** Property can be used to enable NAT Gateway for this API Management service. */
  natGatewayState?: NatGatewayState;
  /**
   * Outbound public IPV4 address prefixes associated with NAT Gateway deployed service. Available only for Premium SKU on stv2 platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundPublicIPAddresses?: string[];
  /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region. */
  disableGateway?: boolean;
  /** The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only. */
  virtualNetworkType?: VirtualNetworkType;
  /** Control Plane Apis version constraint for the API Management service. */
  apiVersionConstraint?: ApiVersionConstraint;
  /** Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored. */
  restore?: boolean;
  /** List of Private Endpoint Connections of this service. */
  privateEndpointConnections?: RemotePrivateEndpointConnectionWrapper[];
  /**
   * Compute Platform Version running the service in this location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly platformVersion?: PlatformVersion;
  /** Status of legacy portal in the API Management service. */
  legacyPortalStatus?: LegacyPortalStatus;
  /** Status of developer portal in this API Management service. */
  developerPortalStatus?: DeveloperPortalStatus;
}

/** Custom hostname configuration. */
export interface HostnameConfiguration {
  /** Hostname type. */
  type: HostnameType;
  /** Hostname to configure on the Api Management service. */
  hostName: string;
  /** Url to the KeyVault Secret containing the Ssl Certificate. If absolute Url containing version is provided, auto-update of ssl certificate will not work. This requires Api Management service to be configured with aka.ms/apimmsi. The secret should be of type *application/x-pkcs12* */
  keyVaultId?: string;
  /** System or User Assigned Managed identity clientId as generated by Azure AD, which has GET access to the keyVault containing the SSL certificate. */
  identityClientId?: string;
  /** Base64 Encoded certificate. */
  encodedCertificate?: string;
  /** Certificate Password. */
  certificatePassword?: string;
  /** Specify true to setup the certificate associated with this Hostname as the Default SSL Certificate. If a client does not send the SNI header, then this will be the certificate that will be challenged. The property is useful if a service has multiple custom hostname enabled and it needs to decide on the default ssl certificate. The setting only applied to gateway Hostname Type. */
  defaultSslBinding?: boolean;
  /** Specify true to always negotiate client certificate on the hostname. Default Value is false. */
  negotiateClientCertificate?: boolean;
  /** Certificate information. */
  certificate?: CertificateInformation;
  /** Certificate Source. */
  certificateSource?: CertificateSource;
  /** Certificate Status. */
  certificateStatus?: CertificateStatus;
}

/** SSL certificate information. */
export interface CertificateInformation {
  /** Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. */
  expiry: Date;
  /** Thumbprint of the certificate. */
  thumbprint: string;
  /** Subject of the certificate. */
  subject: string;
}

/** Information regarding the Configuration API of the API Management service. */
export interface ConfigurationApi {
  /** Indication whether or not the legacy Configuration API (v1) should be exposed on the API Management service. Value is optional but must be 'Enabled' or 'Disabled'. If 'Disabled', legacy Configuration API (v1) will not be available for self-hosted gateways. Default value is 'Enabled' */
  legacyApi?: LegacyApiState;
}

/** Configuration of a virtual network to which API Management service is deployed. */
export interface VirtualNetworkConfiguration {
  /**
   * The virtual network ID. This is typically a GUID. Expect a null GUID by default.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly vnetid?: string;
  /**
   * The name of the subnet.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subnetname?: string;
  /** The full resource ID of a subnet in a virtual network to deploy the API Management service in. */
  subnetResourceId?: string;
}

/** Description of an additional API Management resource location. */
export interface AdditionalLocation {
  /** The location name of the additional region among Azure Data center regions. */
  location: string;
  /** SKU properties of the API Management service. */
  sku: ApiManagementServiceSkuProperties;
  /** A list of availability zones denoting where the resource needs to come from. */
  zones?: string[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in the additional location. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service which is deployed in an Internal Virtual Network in a particular additional location. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateIPAddresses?: string[];
  /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the location. Supported only for Premium SKU being deployed in Virtual Network. */
  publicIpAddressId?: string;
  /** Virtual network configuration for the location. */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * Gateway URL of the API Management service in the Region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayRegionalUrl?: string;
  /** Property can be used to enable NAT Gateway for this API Management service. */
  natGatewayState?: NatGatewayState;
  /**
   * Outbound public IPV4 address prefixes associated with NAT Gateway deployed service. Available only for Premium SKU on stv2 platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundPublicIPAddresses?: string[];
  /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in this additional location. */
  disableGateway?: boolean;
  /**
   * Compute Platform Version running the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly platformVersion?: PlatformVersion;
}

/** API Management service resource SKU properties. */
export interface ApiManagementServiceSkuProperties {
  /** Name of the Sku. */
  name: SkuType;
  /** Capacity of the SKU (number of deployed units of the SKU). For Consumption SKU capacity must be specified as 0. */
  capacity: number;
}

/** Certificate configuration which consist of non-trusted intermediates and root certificates. */
export interface CertificateConfiguration {
  /** Base64 Encoded certificate. */
  encodedCertificate?: string;
  /** Certificate Password. */
  certificatePassword?: string;
  /** The System.Security.Cryptography.x509certificates.StoreName certificate store location. Only Root and CertificateAuthority are valid locations. */
  storeName: CertificateConfigurationStoreName;
  /** Certificate information. */
  certificate?: CertificateInformation;
}

/** Control Plane Apis version constraint for the API Management service. */
export interface ApiVersionConstraint {
  /** Limit control plane API calls to API Management service with version equal to or newer than this value. */
  minApiVersion?: string;
}

/** Remote Private Endpoint Connection resource. */
export interface RemotePrivateEndpointConnectionWrapper {
  /** Private Endpoint connection resource id */
  id?: string;
  /** Private Endpoint Connection Name */
  name?: string;
  /** Private Endpoint Connection Resource Type */
  type?: string;
  /** The resource of private end point. */
  privateEndpoint?: ArmIdWrapper;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * All the Group ids.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupIds?: string[];
}

/** A wrapper for an ARM resource id */
export interface ArmIdWrapper {
  /** NOTE: This property will not be serialized. It can only be populated by the server. */
  readonly id?: string;
}

/** A collection of information about the state of the connection between service consumer and provider. */
export interface PrivateLinkServiceConnectionState {
  /** Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service. */
  status?: PrivateEndpointServiceConnectionStatus;
  /** The reason for approval/rejection of the connection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: string;
}

/** Identity properties of the Api Management service resource. */
export interface ApiManagementServiceIdentity {
  /** The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the service. */
  type: ApimIdentityType;
  /**
   * The principal id of the identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client tenant id of the identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The list of user identities associated with the resource. The user identity
   * dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
   *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

export interface UserIdentityProperties {
  /** The principal id of user assigned identity. */
  principalId?: string;
  /** The client id of user assigned identity. */
  clientId?: string;
}

/** Describes an available API Management SKU. */
export interface MigrateToStv2Contract {
  /** Mode of Migration to stv2. Default is PreserveIp. */
  mode?: MigrateToStv2Mode;
}

/** The response of the List API Management services operation. */
export interface ApiManagementServiceListResult {
  /** Result of the List API Management services operation. */
  value: ApiManagementServiceResource[];
  /** Link to the next set of results. Not empty if Value contains incomplete list of API Management services. */
  nextLink?: string;
}

/** The response of the GetSsoToken operation. */
export interface ApiManagementServiceGetSsoTokenResult {
  /** Redirect URL to the Publisher Portal containing the SSO token. */
  redirectUri?: string;
}

/** Parameters supplied to the CheckNameAvailability operation. */
export interface ApiManagementServiceCheckNameAvailabilityParameters {
  /** The name to check for availability. */
  name: string;
}

/** Response of the CheckNameAvailability operation. */
export interface ApiManagementServiceNameAvailabilityResult {
  /**
   * True if the name is available and can be used to create a new API Management service; otherwise false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that <resourceName> is already in use, and direct them to select a different name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /** Invalid indicates the name provided does not match the resource provider’s naming requirements (incorrect length, unsupported characters, etc.)  AlreadyExists indicates that the name is already in use and is therefore unavailable. */
  reason?: NameAvailabilityReason;
}

/** Response of the GetDomainOwnershipIdentifier operation. */
export interface ApiManagementServiceGetDomainOwnershipIdentifierResult {
  /**
   * The domain ownership identifier value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly domainOwnershipIdentifier?: string;
}

/** Parameter supplied to the Apply Network configuration operation. */
export interface ApiManagementServiceApplyNetworkConfigurationParameters {
  /** Location of the Api Management service to update for a multi-region service. For a service deployed in a single region, this parameter is not required. */
  location?: string;
}

/** Paged Documentation list representation. */
export interface DocumentationCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DocumentationContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Documentation update contract details. */
export interface DocumentationUpdateContract {
  /** documentation title. */
  title?: string;
  /** Markdown documentation content. */
  content?: string;
}

/** Paged email template list representation. */
export interface EmailTemplateCollection {
  /** Page values. */
  value?: EmailTemplateContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Email Template Parameter contract. */
export interface EmailTemplateParametersContractProperties {
  /** Template parameter name. */
  name?: string;
  /** Template parameter title. */
  title?: string;
  /** Template parameter description. */
  description?: string;
}

/** Email Template update Parameters. */
export interface EmailTemplateUpdateParameters {
  /** Subject of the Template. */
  subject?: string;
  /** Title of the Template. */
  title?: string;
  /** Description of the Email Template. */
  description?: string;
  /** Email Template Body. This should be a valid XDocument */
  body?: string;
  /** Email Template Parameter values. */
  parameters?: EmailTemplateParametersContractProperties[];
}

/** The response of the List API Management gateway operation. */
export interface ApiManagementGatewayConfigConnectionListResult {
  /** Result of the List API Management gateway config connection operation. */
  value: ApiManagementGatewayConfigConnectionResource[];
  /** Link to the next set of results. Not empty if Value contains incomplete list of API Management services. */
  nextLink?: string;
}

/** Paged Gateway list representation. */
export interface GatewayCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: GatewayContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Resource location data properties. */
export interface ResourceLocationDataContract {
  /** A canonical name for the geographic or physical location. */
  name: string;
  /** The city or locality where the resource is located. */
  city?: string;
  /** The district, state, or province where the resource is located. */
  district?: string;
  /** The country or region where the resource is located. */
  countryOrRegion?: string;
}

/** Gateway authentication keys. */
export interface GatewayKeysContract {
  /** Primary gateway key. */
  primary?: string;
  /** Secondary gateway key. */
  secondary?: string;
}

/** Gateway key regeneration request contract properties. */
export interface GatewayKeyRegenerationRequestContract {
  /** The Key being regenerated. */
  keyType: KeyType;
}

/** Gateway token request contract properties. */
export interface GatewayTokenRequestContract {
  /** The Key to be used to generate gateway token. */
  keyType: KeyType;
  /**
   * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expiry: Date;
}

/** Gateway access token. */
export interface GatewayTokenContract {
  /** Shared Access Authentication token value for the Gateway. */
  value?: string;
}

/** Paged Gateway hostname configuration list representation. */
export interface GatewayHostnameConfigurationCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: GatewayHostnameConfigurationContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged Gateway certificate authority list representation. */
export interface GatewayCertificateAuthorityCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: GatewayCertificateAuthorityContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List debug credentials properties. */
export interface GatewayListDebugCredentialsContract {
  /** Credentials expiration in ISO8601 format. Maximum duration of the credentials is PT1H. When property is not specified, them value PT1H is used. */
  credentialsExpireAfter?: string;
  /** Purposes of debug credential. */
  purposes: GatewayListDebugCredentialsContractPurpose[];
  /** Full resource Id of an API. */
  apiId: string;
}

/** Gateway debug credentials. */
export interface GatewayDebugCredentialsContract {
  /** Gateway debug token. */
  token?: string;
}

/** List trace properties. */
export interface GatewayListTraceContract {
  /** Trace id. */
  traceId?: string;
}

/** Paged Group list representation. */
export interface GroupCollection {
  /** Page values. */
  value?: GroupContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Group contract Properties. */
export interface GroupContractProperties {
  /** Group name. */
  displayName: string;
  /** Group description. Can contain HTML formatting tags. */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly builtIn?: boolean;
  /** Group type. */
  type?: GroupType;
  /** For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
  externalId?: string;
}

/** Parameters supplied to the Create Group operation. */
export interface GroupCreateParameters {
  /** Group name. */
  displayName?: string;
  /** Group description. */
  description?: string;
  /** Group type. */
  type?: GroupType;
  /** Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
  externalId?: string;
}

/** Parameters supplied to the Update Group operation. */
export interface GroupUpdateParameters {
  /** Group name. */
  displayName?: string;
  /** Group description. */
  description?: string;
  /** Group type. */
  type?: GroupType;
  /** Identifier of the external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
  externalId?: string;
}

/** Paged Users list representation. */
export interface UserCollection {
  /** Page values. */
  value?: UserContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** User Entity Base Parameters set. */
export interface UserEntityBaseParameters {
  /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
  state?: UserState;
  /** Optional note about a user set by the administrator. */
  note?: string;
  /** Collection of user identities. */
  identities?: UserIdentityContract[];
}

/** User identity details. */
export interface UserIdentityContract {
  /** Identity provider name. */
  provider?: string;
  /** Identifier value within provider. */
  id?: string;
}

/** List of all the Identity Providers configured on the service instance. */
export interface IdentityProviderList {
  /** Identity Provider configuration values. */
  value?: IdentityProviderContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Identity Provider Base Parameter Properties. */
export interface IdentityProviderBaseParameters {
  /** Identity Provider Type identifier. */
  type?: IdentityProviderType;
  /** The TenantId to use instead of Common when logging into Active Directory */
  signinTenant?: string;
  /** List of Allowed Tenants when configuring Azure Active Directory login. */
  allowedTenants?: string[];
  /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
  authority?: string;
  /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
  signupPolicyName?: string;
  /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
  signinPolicyName?: string;
  /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
  profileEditingPolicyName?: string;
  /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
  passwordResetPolicyName?: string;
  /** The client library to be used in the developer portal. Only applies to AAD and AAD B2C Identity Provider. */
  clientLibrary?: string;
}

/** Parameters supplied to update Identity Provider */
export interface IdentityProviderUpdateParameters {
  /** Identity Provider Type identifier. */
  type?: IdentityProviderType;
  /** The TenantId to use instead of Common when logging into Active Directory */
  signinTenant?: string;
  /** List of Allowed Tenants when configuring Azure Active Directory login. */
  allowedTenants?: string[];
  /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
  authority?: string;
  /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
  signupPolicyName?: string;
  /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
  signinPolicyName?: string;
  /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
  profileEditingPolicyName?: string;
  /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
  passwordResetPolicyName?: string;
  /** The client library to be used in the developer portal. Only applies to AAD and AAD B2C Identity Provider. */
  clientLibrary?: string;
  /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
  clientId?: string;
  /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. */
  clientSecret?: string;
}

/** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
export interface ClientSecretContract {
  /** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
  clientSecret?: string;
}

/** Paged Logger list representation. */
export interface LoggerCollection {
  /** Logger values. */
  value?: LoggerContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Logger update contract. */
export interface LoggerUpdateContract {
  /** Logger type. */
  loggerType?: LoggerType;
  /** Logger description. */
  description?: string;
  /** Logger credentials. */
  credentials?: { [propertyName: string]: string };
  /** Whether records are buffered in the logger before publishing. Default is assumed to be true. */
  isBuffered?: boolean;
}

/** Paged NamedValue list representation. */
export interface NamedValueCollection {
  /** Page values. */
  value?: NamedValueContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** NamedValue Entity Base Parameters set. */
export interface NamedValueEntityBaseParameters {
  /** Optional tags that when provided can be used to filter the NamedValue list. */
  tags?: string[];
  /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
  secret?: boolean;
}

/** NamedValue update Parameters. */
export interface NamedValueUpdateParameters {
  /** Optional tags that when provided can be used to filter the NamedValue list. */
  tags?: string[];
  /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
  secret?: boolean;
  /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
  displayName?: string;
  /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. */
  value?: string;
  /** KeyVault location details of the namedValue. */
  keyVault?: KeyVaultContractCreateProperties;
}

/** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
export interface NamedValueSecretContract {
  /** This is secret value of the NamedValue entity. */
  value?: string;
}

/** Network Status in the Location */
export interface NetworkStatusContractByLocation {
  /** Location of service */
  location?: string;
  /** Network status in Location */
  networkStatus?: NetworkStatusContract;
}

/** Network Status details. */
export interface NetworkStatusContract {
  /** Gets the list of DNS servers IPV4 addresses. */
  dnsServers: string[];
  /** Gets the list of Connectivity Status to the Resources on which the service depends upon. */
  connectivityStatus: ConnectivityStatusContract[];
}

/** Details about connectivity to a resource. */
export interface ConnectivityStatusContract {
  /** The hostname of the resource which the service depends on. This can be the database, storage or any other azure resource on which the service depends upon. */
  name: string;
  /** Resource Connectivity Status Type identifier. */
  status: ConnectivityStatusType;
  /** Error details of the connectivity to the resource. */
  error?: string;
  /**
   * The date when the resource connectivity status was last updated. This status should be updated every 15 minutes. If this status has not been updated, then it means that the service has lost network connectivity to the resource, from inside the Virtual Network.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  lastUpdated: Date;
  /**
   * The date when the resource connectivity status last Changed from success to failure or vice-versa. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  lastStatusChange: Date;
  /** Resource Type. */
  resourceType: string;
  /** Whether this is optional. */
  isOptional: boolean;
}

/** Paged Notification list representation. */
export interface NotificationCollection {
  /** Page values. */
  value?: NotificationContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Notification Parameter contract. */
export interface RecipientsContractProperties {
  /** List of Emails subscribed for the notification. */
  emails?: string[];
  /** List of Users subscribed for the notification. */
  users?: string[];
}

/** Paged Recipient User list representation. */
export interface RecipientUserCollection {
  /** Page values. */
  value?: RecipientUserContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Recipient User list representation. */
export interface RecipientEmailCollection {
  /** Page values. */
  value?: RecipientEmailContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged OpenIdProviders list representation. */
export interface OpenIdConnectProviderCollection {
  /** Page values. */
  value?: OpenidConnectProviderContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Parameters supplied to the Update OpenID Connect Provider operation. */
export interface OpenidConnectProviderUpdateContract {
  /** User-friendly OpenID Connect Provider name. */
  displayName?: string;
  /** User-friendly description of OpenID Connect Provider. */
  description?: string;
  /** Metadata endpoint URI. */
  metadataEndpoint?: string;
  /** Client ID of developer console which is the client application. */
  clientId?: string;
  /** Client Secret of developer console which is the client application. */
  clientSecret?: string;
  /** If true, the Open ID Connect provider may be used in the developer portal test console. True by default if no value is provided. */
  useInTestConsole?: boolean;
  /** If true, the Open ID Connect provider will be used in the API documentation in the developer portal. False by default if no value is provided. */
  useInApiDocumentation?: boolean;
}

/** Collection of Outbound Environment Endpoints */
export interface OutboundEnvironmentEndpointList {
  /** Collection of resources. */
  value: OutboundEnvironmentEndpoint[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Endpoints accessed for a common purpose that the Api Management Service requires outbound network access to. */
export interface OutboundEnvironmentEndpoint {
  /** The type of service accessed by the Api Management Service, e.g., Azure Storage, Azure SQL Database, and Azure Active Directory. */
  category?: string;
  /** The endpoints that the Api Management Service reaches the service at. */
  endpoints?: EndpointDependency[];
}

/** A domain name that a service is reached at. */
export interface EndpointDependency {
  /** The domain name of the dependency. */
  domainName?: string;
  /** The Ports used when connecting to DomainName. */
  endpointDetails?: EndpointDetail[];
}

/** Current TCP connectivity information from the Api Management Service to a single endpoint. */
export interface EndpointDetail {
  /** The port an endpoint is connected to. */
  port?: number;
  /** The region of the dependency. */
  region?: string;
}

/** Descriptions of API Management policies. */
export interface PolicyDescriptionCollection {
  /** Descriptions of API Management policies. */
  value?: PolicyDescriptionContract[];
  /** Total record count number. */
  count?: number;
}

/** The response of the get policy fragments operation. */
export interface PolicyFragmentCollection {
  /** Policy fragment contract value. */
  value?: PolicyFragmentContract[];
  /** Total record count number. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** A collection of resources. */
export interface ResourceCollection {
  /** A collection of resources. */
  value?: ResourceCollectionValueItem[];
  /** Total record count number. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** The response of the get policy restrictions operation. */
export interface PolicyRestrictionCollection {
  value?: PolicyRestrictionContract[];
  /** Next page link if any. */
  nextLink?: string;
}

/** Policy restriction contract details. */
export interface PolicyRestrictionUpdateContract {
  /** Path to the policy document. */
  scope?: string;
  /** Indicates if base policy should be enforced for the policy document. */
  requireBase?: PolicyRestrictionRequireBase;
}

/** Error Body contract. */
export interface ErrorResponseBody {
  /** Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response. */
  code?: string;
  /** Human-readable representation of the error. */
  message?: string;
  /** The list of invalid fields send in request, in case of validation error. */
  details?: ErrorFieldContract[];
}

/** Error Field contract. */
export interface ErrorFieldContract {
  /** Property level error code. */
  code?: string;
  /** Human-readable representation of property-level error. */
  message?: string;
  /** Property name. */
  target?: string;
}

/** Log of the entity being created, updated or deleted. */
export interface OperationResultLogItemContract {
  /** The type of entity contract. */
  objectType?: string;
  /** Action like create/update/delete. */
  action?: string;
  /** Identifier of the entity being created/updated/deleted. */
  objectKey?: string;
}

/** The collection of the developer portal configurations. */
export interface PortalConfigCollection {
  /** The developer portal configurations. */
  value?: PortalConfigContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

export interface PortalConfigPropertiesSignin {
  /** Redirect anonymous users to the sign-in page. */
  require?: boolean;
}

export interface PortalConfigPropertiesSignup {
  /** Terms of service settings. */
  termsOfService?: PortalConfigTermsOfServiceProperties;
}

/** Terms of service contract properties. */
export interface PortalConfigTermsOfServiceProperties {
  /** A terms of service text. */
  text?: string;
  /** Ask user for consent to the terms of service. */
  requireConsent?: boolean;
}

export interface PortalConfigDelegationProperties {
  /** Enable or disable delegation for user registration. */
  delegateRegistration?: boolean;
  /** Enable or disable delegation for product subscriptions. */
  delegateSubscription?: boolean;
  /** A delegation endpoint URL. */
  delegationUrl?: string;
  /** A base64-encoded validation key to ensure requests originate from Azure API Management service. */
  validationKey?: string;
}

/** The developer portal Cross-Origin Resource Sharing (CORS) settings. */
export interface PortalConfigCorsProperties {
  /** Allowed origins, e.g. `https://trusted.com`. */
  allowedOrigins?: string[];
}

/** The developer portal Content Security Policy (CSP) settings. */
export interface PortalConfigCspProperties {
  /** The mode of the developer portal Content Security Policy (CSP). */
  mode?: PortalSettingsCspMode;
  /** The URLs used by the browser to report CSP violations. */
  reportUri?: string[];
  /** Allowed sources, e.g. `*.trusted.com`, `trusted.com`, `https://`. */
  allowedSources?: string[];
}

/** Paged list of portal revisions. */
export interface PortalRevisionCollection {
  /**
   * Collection of portal revisions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: PortalRevisionContract[];
  /**
   * Next page link, if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Descriptions of API Management policies. */
export interface PortalSettingsCollection {
  /** Descriptions of API Management policies. */
  value?: PortalSettingsContract[];
  /** Total record count number. */
  count?: number;
}

/** Subscriptions delegation settings properties. */
export interface SubscriptionsDelegationSettingsProperties {
  /** Enable or disable delegation for subscriptions. */
  enabled?: boolean;
}

/** User registration delegation settings properties. */
export interface RegistrationDelegationSettingsProperties {
  /** Enable or disable delegation for user registration. */
  enabled?: boolean;
}

/** Terms of service contract properties. */
export interface TermsOfServiceProperties {
  /** A terms of service text. */
  text?: string;
  /** Display terms of service during a sign-up process. */
  enabled?: boolean;
  /** Ask user for consent to the terms of service. */
  consentRequired?: boolean;
}

/** Client or app secret used in IdentityProviders, Aad, OpenID or OAuth. */
export interface PortalSettingValidationKeyContract {
  /** This is secret value of the validation key in portal settings. */
  validationKey?: string;
}

/** List of private endpoint connection associated with the specified storage account */
export interface PrivateEndpointConnectionListResult {
  /** Array of private endpoint connections */
  value?: PrivateEndpointConnection[];
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /**
   * The ARM identifier for Private Endpoint
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** A request to approve or reject a private endpoint connection */
export interface PrivateEndpointConnectionRequest {
  /** Private Endpoint Connection Resource Id. */
  id?: string;
  /** The connection state of the private endpoint connection. */
  properties?: PrivateEndpointConnectionRequestProperties;
}

/** The connection state of the private endpoint connection. */
export interface PrivateEndpointConnectionRequestProperties {
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
}

/** A list of private link resources */
export interface PrivateLinkResourceListResult {
  /** Array of private link resources */
  value?: PrivateLinkResource[];
}

/** Product Update parameters. */
export interface ProductUpdateParameters {
  /** Product description. May include HTML formatting tags. */
  description?: string;
  /** Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process. */
  terms?: string;
  /** Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true. */
  subscriptionRequired?: boolean;
  /** whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false. */
  approvalRequired?: boolean;
  /** Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false. */
  subscriptionsLimit?: number;
  /** whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. */
  state?: ProductState;
  /** Product name. */
  displayName?: string;
}

/** Paged Subscriptions list representation. */
export interface SubscriptionCollection {
  /** Page values. */
  value?: SubscriptionContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Product-API link list representation. */
export interface ProductApiLinkCollection {
  /** Page values. */
  value?: ProductApiLinkContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Product-group link list representation. */
export interface ProductGroupLinkCollection {
  /** Page values. */
  value?: ProductGroupLinkContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Quota Counter list representation. */
export interface QuotaCounterCollection {
  /** Quota counter values. */
  value?: QuotaCounterContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Quota counter details. */
export interface QuotaCounterContract {
  /** The Key value of the Counter. Must not be empty. */
  counterKey: string;
  /** Identifier of the Period for which the counter was collected. Must not be empty. */
  periodKey: string;
  /**
   * The date of the start of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  periodStartTime: Date;
  /**
   * The date of the end of Counter Period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  periodEndTime: Date;
  /** Quota Value Properties */
  value?: QuotaCounterValueContractProperties;
}

/** Quota counter value details. */
export interface QuotaCounterValueContractProperties {
  /** Number of times Counter was called. */
  callsCount?: number;
  /** Data Transferred in KiloBytes. */
  kbTransferred?: number;
}

/** Quota counter value details. */
export interface QuotaCounterValueUpdateContract {
  /** Number of times Counter was called. */
  callsCount?: number;
  /** Data Transferred in KiloBytes. */
  kbTransferred?: number;
}

/** Lists Regions operation response details. */
export interface RegionListResult {
  /** Lists of Regions. */
  value?: RegionContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Region profile. */
export interface RegionContract {
  /**
   * Region name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** whether Region is the master region. */
  isMasterRegion?: boolean;
  /** whether Region is deleted. */
  isDeleted?: boolean;
}

/** Paged Report records list representation. */
export interface ReportCollection {
  /** Page values. */
  value?: ReportRecordContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Report data. */
export interface ReportRecordContract {
  /** Name depending on report endpoint specifies product, API, operation or developer name. */
  name?: string;
  /**
   * Start of aggregation period. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  timestamp?: Date;
  /** Length of aggregation period.  Interval must be multiple of 15 minutes and may not be zero. The value should be in ISO 8601 format (http://en.wikipedia.org/wiki/ISO_8601#Durations). */
  interval?: string;
  /** Country to which this record data is related. */
  country?: string;
  /** Country region to which this record data is related. */
  region?: string;
  /** Zip code to which this record data is related. */
  zip?: string;
  /**
   * User identifier path. /users/{userId}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userId?: string;
  /**
   * Product identifier path. /products/{productId}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productId?: string;
  /** API identifier path. /apis/{apiId} */
  apiId?: string;
  /** Operation identifier path. /apis/{apiId}/operations/{operationId} */
  operationId?: string;
  /** API region identifier. */
  apiRegion?: string;
  /** Subscription identifier path. /subscriptions/{subscriptionId} */
  subscriptionId?: string;
  /** Number of successful calls. This includes calls returning HttpStatusCode <= 301 and HttpStatusCode.NotModified and HttpStatusCode.TemporaryRedirect */
  callCountSuccess?: number;
  /** Number of calls blocked due to invalid credentials. This includes calls returning HttpStatusCode.Unauthorized and HttpStatusCode.Forbidden and HttpStatusCode.TooManyRequests */
  callCountBlocked?: number;
  /** Number of calls failed due to gateway or backend errors. This includes calls returning HttpStatusCode.BadRequest(400) and any Code between HttpStatusCode.InternalServerError (500) and 600 */
  callCountFailed?: number;
  /** Number of other calls. */
  callCountOther?: number;
  /** Total number of calls. */
  callCountTotal?: number;
  /** Bandwidth consumed. */
  bandwidth?: number;
  /** Number of times when content was served from cache policy. */
  cacheHitCount?: number;
  /** Number of times content was fetched from backend. */
  cacheMissCount?: number;
  /** Average time it took to process request. */
  apiTimeAvg?: number;
  /** Minimum time it took to process request. */
  apiTimeMin?: number;
  /** Maximum time it took to process request. */
  apiTimeMax?: number;
  /** Average time it took to process request on backend. */
  serviceTimeAvg?: number;
  /** Minimum time it took to process request on backend. */
  serviceTimeMin?: number;
  /** Maximum time it took to process request on backend. */
  serviceTimeMax?: number;
}

/** Paged Report records list representation. */
export interface RequestReportCollection {
  /** Page values. */
  value?: RequestReportRecordContract[];
  /** Total record count number across all pages. */
  count?: number;
}

/** Request Report data. */
export interface RequestReportRecordContract {
  /** API identifier path. /apis/{apiId} */
  apiId?: string;
  /** Operation identifier path. /apis/{apiId}/operations/{operationId} */
  operationId?: string;
  /**
   * Product identifier path. /products/{productId}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly productId?: string;
  /**
   * User identifier path. /users/{userId}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly userId?: string;
  /** The HTTP method associated with this request.. */
  method?: string;
  /** The full URL associated with this request. */
  url?: string;
  /** The client IP address associated with this request. */
  ipAddress?: string;
  /** The HTTP status code received by the gateway as a result of forwarding this request to the backend. */
  backendResponseCode?: string;
  /** The HTTP status code returned by the gateway. */
  responseCode?: number;
  /** The size of the response returned by the gateway. */
  responseSize?: number;
  /** The date and time when this request was received by the gateway in ISO 8601 format. */
  timestamp?: Date;
  /** Specifies if response cache was involved in generating the response. If the value is none, the cache was not used. If the value is hit, cached response was returned. If the value is miss, the cache was used but lookup resulted in a miss and request was fulfilled by the backend. */
  cache?: string;
  /** The total time it took to process this request. */
  apiTime?: number;
  /** he time it took to forward this request to the backend and get the response back. */
  serviceTime?: number;
  /** Azure region where the gateway that processed this request is located. */
  apiRegion?: string;
  /** Subscription identifier path. /subscriptions/{subscriptionId} */
  subscriptionId?: string;
  /** Request Identifier. */
  requestId?: string;
  /** The size of this request.. */
  requestSize?: number;
}

/** The response of the list schema operation. */
export interface GlobalSchemaCollection {
  /**
   * Global Schema Contract value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: GlobalSchemaContract[];
  /** Total record count number. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Paged AccessInformation list representation. */
export interface TenantSettingsCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: TenantSettingsContract[];
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The List Resource Skus operation response. */
export interface ApiManagementSkusResult {
  /** The list of skus available for the subscription. */
  value: ApiManagementSku[];
  /**
   * The URI to fetch the next page of Resource Skus. Call ListNext() with this URI to fetch the next page of Resource Skus
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Describes an available ApiManagement SKU. */
export interface ApiManagementSku {
  /**
   * The type of resource the SKU applies to.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * The name of SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Specifies the tier of virtual machines in a scale set.<br /><br /> Possible Values:<br /><br /> **Standard**<br /><br /> **Basic**
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
  /**
   * The Size of the SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: string;
  /**
   * The Family of this particular SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly family?: string;
  /**
   * The Kind of resources that are supported in this SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kind?: string;
  /**
   * Specifies the number of virtual machines in the scale set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capacity?: ApiManagementSkuCapacity;
  /**
   * The set of locations that the SKU is available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * A list of locations and availability zones in those locations where the SKU is available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locationInfo?: ApiManagementSkuLocationInfo[];
  /**
   * The api versions that support this SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiVersions?: string[];
  /**
   * Metadata for retrieving price info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly costs?: ApiManagementSkuCosts[];
  /**
   * A name value pair to describe the capability.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: ApiManagementSkuCapabilities[];
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictions?: ApiManagementSkuRestrictions[];
}

/** Describes scaling information of a SKU. */
export interface ApiManagementSkuCapacity {
  /**
   * The minimum capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minimum?: number;
  /**
   * The maximum capacity that can be set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maximum?: number;
  /**
   * The default capacity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly default?: number;
  /**
   * The scale type applicable to the sku.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scaleType?: ApiManagementSkuCapacityScaleType;
}

export interface ApiManagementSkuLocationInfo {
  /**
   * Location of the SKU
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * List of availability zones where the SKU is supported.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
  /**
   * Details of capabilities available to a SKU in specific zones.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zoneDetails?: ApiManagementSkuZoneDetails[];
}

/** Describes The zonal capabilities of a SKU. */
export interface ApiManagementSkuZoneDetails {
  /**
   * The set of zones that the SKU is available in with the specified capabilities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string[];
  /**
   * A list of capabilities that are available for the SKU in the specified list of zones.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: ApiManagementSkuCapabilities[];
}

/** Describes The SKU capabilities object. */
export interface ApiManagementSkuCapabilities {
  /**
   * An invariant to describe the feature.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * An invariant if the feature is measured by quantity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** Describes metadata for retrieving price info. */
export interface ApiManagementSkuCosts {
  /**
   * Used for querying price from commerce.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly meterID?: string;
  /**
   * The multiplier is needed to extend the base metered cost.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly quantity?: number;
  /**
   * An invariant to show the extended unit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly extendedUnit?: string;
}

/** Describes scaling information of a SKU. */
export interface ApiManagementSkuRestrictions {
  /**
   * The type of restrictions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: ApiManagementSkuRestrictionsType;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /**
   * The information about the restriction where the SKU cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictionInfo?: ApiManagementSkuRestrictionInfo;
  /**
   * The reason for restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reasonCode?: ApiManagementSkuRestrictionsReasonCode;
}

export interface ApiManagementSkuRestrictionInfo {
  /**
   * Locations where the SKU is restricted
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * List of availability zones where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
}

/** Subscription create details. */
export interface SubscriptionCreateParameters {
  /** User (user id path) for whom subscription is being created in form /users/{userId} */
  ownerId?: string;
  /** Scope like /products/{productId} or /apis or /apis/{apiId}. */
  scope?: string;
  /** Subscription name. */
  displayName?: string;
  /** Primary subscription key. If not specified during request key will be generated automatically. */
  primaryKey?: string;
  /** Secondary subscription key. If not specified during request key will be generated automatically. */
  secondaryKey?: string;
  /** Initial subscription state. If no value is specified, subscription is created with Submitted state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated. */
  state?: SubscriptionState;
  /** Determines whether tracing can be enabled */
  allowTracing?: boolean;
}

/** Subscription update details. */
export interface SubscriptionUpdateParameters {
  /** User identifier path: /users/{userId} */
  ownerId?: string;
  /** Scope like /products/{productId} or /apis or /apis/{apiId} */
  scope?: string;
  /** Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. */
  expirationDate?: Date;
  /** Subscription name. */
  displayName?: string;
  /** Primary subscription key. */
  primaryKey?: string;
  /** Secondary subscription key. */
  secondaryKey?: string;
  /** Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated. */
  state?: SubscriptionState;
  /** Comments describing subscription state change by the administrator when the state is changed to the 'rejected'. */
  stateComment?: string;
  /** Determines whether tracing can be enabled */
  allowTracing?: boolean;
}

/** Subscription keys. */
export interface SubscriptionKeysContract {
  /** Subscription primary key. */
  primaryKey?: string;
  /** Subscription secondary key. */
  secondaryKey?: string;
}

/** Parameters supplied to Create/Update Tag operations. */
export interface TagCreateUpdateParameters {
  /** Tag name. */
  displayName?: string;
}

/** Paged Tag-API link list representation. */
export interface TagApiLinkCollection {
  /** Page values. */
  value?: TagApiLinkContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Tag-operation link list representation. */
export interface TagOperationLinkCollection {
  /** Page values. */
  value?: TagOperationLinkContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged Tag-product link list representation. */
export interface TagProductLinkCollection {
  /** Page values. */
  value?: TagProductLinkContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Paged AccessInformation list representation. */
export interface AccessInformationCollection {
  /**
   * Page values.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AccessInformationContract[];
  /** Total record count number across all pages. */
  count?: number;
  /**
   * Next page link if any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Tenant access information update parameters. */
export interface AccessInformationCreateParameters {
  /** Principal (User) Identifier. */
  principalId?: string;
  /** Primary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  primaryKey?: string;
  /** Secondary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  secondaryKey?: string;
  /** Determines whether direct access is enabled. */
  enabled?: boolean;
}

/** Tenant access information update parameters. */
export interface AccessInformationUpdateParameters {
  /** Determines whether direct access is enabled. */
  enabled?: boolean;
}

/** Tenant access information contract of the API Management service. */
export interface AccessInformationSecretsContract {
  /** Access Information type ('access' or 'gitAccess') */
  id?: string;
  /** Principal (User) Identifier. */
  principalId?: string;
  /** Primary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  primaryKey?: string;
  /** Secondary access key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  secondaryKey?: string;
  /** Determines whether direct access is enabled. */
  enabled?: boolean;
}

/** Deploy Tenant Configuration Contract. */
export interface DeployConfigurationParameters {
  /** The name of the Git branch from which the configuration is to be deployed to the configuration database. */
  branch?: string;
  /** The value enforcing deleting subscriptions to products that are deleted in this update. */
  force?: boolean;
}

/** Save Tenant Configuration Contract details. */
export interface SaveConfigurationParameter {
  /** The name of the Git branch in which to commit the current configuration snapshot. */
  branch?: string;
  /** The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten. */
  force?: boolean;
}

/** User create details. */
export interface UserCreateParameters {
  /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
  state?: UserState;
  /** Optional note about a user set by the administrator. */
  note?: string;
  /** Collection of user identities. */
  identities?: UserIdentityContract[];
  /** Email address. Must not be empty and must be unique within the service instance. */
  email?: string;
  /** First name. */
  firstName?: string;
  /** Last name. */
  lastName?: string;
  /** User Password. If no value is provided, a default password is generated. */
  password?: string;
  /** Determines the type of application which send the create user request. Default is legacy portal. */
  appType?: AppType;
  /** Determines the type of confirmation e-mail that will be sent to the newly created user. */
  confirmation?: Confirmation;
}

/** User update parameters. */
export interface UserUpdateParameters {
  /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
  state?: UserState;
  /** Optional note about a user set by the administrator. */
  note?: string;
  /** Collection of user identities. */
  identities?: UserIdentityContract[];
  /** Email address. Must not be empty and must be unique within the service instance. */
  email?: string;
  /** User Password. */
  password?: string;
  /** First name. */
  firstName?: string;
  /** Last name. */
  lastName?: string;
}

/** Generate SSO Url operations response details. */
export interface GenerateSsoUrlResult {
  /** Redirect Url containing the SSO URL value. */
  value?: string;
}

/** List of Users Identity list representation. */
export interface UserIdentityCollection {
  /** User Identity values. */
  value?: UserIdentityContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** Get User Token parameters. */
export interface UserTokenParameters {
  /** The Key to be used to generate token for user. */
  keyType?: KeyType;
  /**
   * The Expiry time of the Token. Maximum token expiry time is set to 30 days. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expiry?: Date;
}

/** Get User Token response details. */
export interface UserTokenResult {
  /** Shared Access Authorization token for the User. */
  value?: string;
}

/** The response of the List API Management WorkspaceLink operation. */
export interface ApiManagementWorkspaceLinksListResult {
  /** Result of the List API Management WorkspaceLinks operation. */
  value: ApiManagementWorkspaceLinksResource[];
  /** Link to the next set of results. Not empty if Value contains incomplete list of API Management services. */
  nextLink?: string;
}

export interface WorkspaceLinksBaseProperties {
  /** The link to the API Management service workspace. */
  workspaceId?: string;
  /** The array of linked gateways. */
  gateways?: WorkspaceLinksGateway[];
}

export interface WorkspaceLinksGateway {
  /** The link to the API Management gateway. */
  id?: string;
}

/** Paged workspace list representation. */
export interface WorkspaceCollection {
  /** Page values. */
  value?: WorkspaceContract[];
  /** Total record count number across all pages. */
  count?: number;
  /** Next page link if any. */
  nextLink?: string;
}

/** The current status of an async operation. */
export interface OperationStatusResult {
  /** Fully qualified ID for the async operation. */
  id?: string;
  /**
   * Fully qualified ID of the resource against which the original async operation was started.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceId?: string;
  /** Name of the async operation. */
  name?: string;
  /** Operation status. */
  status: string;
  /** Percent of the operation that is complete. */
  percentComplete?: number;
  /** The start time of the operation. */
  startTime?: Date;
  /** The end time of the operation. */
  endTime?: Date;
  /** The operations list. */
  operations?: OperationStatusResult[];
  /** If present, details of the operation error. */
  error?: ErrorDetail;
}

/** Object used to create an API Revision or Version based on an existing API Revision */
export interface ApiRevisionInfoContract {
  /** Resource identifier of API to be used to create the revision from. */
  sourceApiId?: string;
  /** Version identifier for the new API Version. */
  apiVersionName?: string;
  /** Description of new API Revision. */
  apiRevisionDescription?: string;
  /** Version set details */
  apiVersionSet?: ApiVersionSetContractDetails;
}

/** The response of the list policy operation. */
export interface PolicyWithComplianceCollection {
  /** Policy Contract value. */
  value?: PolicyWithComplianceContract[];
  /** Next page link if any. */
  nextLink?: string;
}

/** Quota counter value details. */
export interface QuotaCounterValueContract {
  /** Number of times Counter was called. */
  callsCount?: number;
  /** Data Transferred in KiloBytes. */
  kbTransferred?: number;
}

/** Log of the entity being created, updated or deleted. */
export interface ResolverResultLogItemContract {
  /** The type of entity contract. */
  objectType?: string;
  /** Action like create/update/delete. */
  action?: string;
  /** Identifier of the entity being created/updated/deleted. */
  objectKey?: string;
}

/** Properties of an API Management gateway resource description. */
export interface ApiManagementGatewayProperties
  extends ApiManagementGatewayBaseProperties {}

/** Properties of an API Management gateway resource description. */
export interface ApiManagementGatewayUpdateProperties
  extends ApiManagementGatewayBaseProperties {}

/** A single API Management gateway resource in List or Get response. */
export interface ApiManagementGatewayResource extends ApimResource {
  /** SKU properties of the API Management gateway. */
  sku: ApiManagementGatewaySkuProperties;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Resource location. */
  location: string;
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * The current provisioning state of the API Management gateway which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management gateway, which is targeted by the long running operation started on the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management gateway.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAtUtc?: Date;
  /** Information regarding how the gateway should be exposed. */
  frontend?: FrontendConfiguration;
  /** Information regarding how the gateway should integrate with backend systems. */
  backend?: BackendConfiguration;
  /** Information regarding the Configuration API of the API Management gateway. This is only applicable for API gateway with Standard SKU. */
  configurationApi?: GatewayConfigurationApi;
  /** The type of VPN in which API Management gateway needs to be configured in. */
  virtualNetworkType?: VirtualNetworkType;
}

/** Parameter supplied to Update API Management gateway. */
export interface ApiManagementGatewayUpdateParameters extends ApimResource {
  /** SKU properties of the API Management gateway. */
  sku?: ApiManagementGatewaySkuPropertiesForPatch;
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * The current provisioning state of the API Management gateway which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management gateway, which is targeted by the long running operation started on the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management gateway.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAtUtc?: Date;
  /** Information regarding how the gateway should be exposed. */
  frontend?: FrontendConfiguration;
  /** Information regarding how the gateway should integrate with backend systems. */
  backend?: BackendConfiguration;
  /** Information regarding the Configuration API of the API Management gateway. This is only applicable for API gateway with Standard SKU. */
  configurationApi?: GatewayConfigurationApi;
  /** The type of VPN in which API Management gateway needs to be configured in. */
  virtualNetworkType?: VirtualNetworkType;
}

/** A single API Management service resource in List or Get response. */
export interface ApiManagementServiceResource extends ApimResource {
  /** SKU properties of the API Management service. */
  sku: ApiManagementServiceSkuProperties;
  /** Managed service identity of the Api Management service. */
  identity?: ApiManagementServiceIdentity;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Resource location. */
  location: string;
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** A list of availability zones denoting where the resource needs to come from. */
  zones?: string[];
  /** Email address from which the notification will be sent. */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scmUrl?: string;
  /**
   * DEveloper Portal endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly developerPortalUrl?: string;
  /** Custom hostname configuration of the API Management service. */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateIPAddresses?: string[];
  /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the region. Supported only for Developer and Premium SKU being deployed in Virtual Network. */
  publicIpAddressId?: string;
  /** Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Configuration API configuration of the API Management service. */
  configurationApi?: ConfigurationApi;
  /** Virtual network configuration of the API Management service. */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /** Additional datacenter locations of the API Management service. */
  additionalLocations?: AdditionalLocation[];
  /** Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1, 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of the following ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.</br> Note: The following ciphers can't be disabled since they are required by internal platform components: TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 */
  customProperties?: { [propertyName: string]: string };
  /** List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10. */
  certificates?: CertificateConfiguration[];
  /** Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway. */
  enableClientCertificate?: boolean;
  /** Property can be used to enable NAT Gateway for this API Management service. */
  natGatewayState?: NatGatewayState;
  /**
   * Outbound public IPV4 address prefixes associated with NAT Gateway deployed service. Available only for Premium SKU on stv2 platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundPublicIPAddresses?: string[];
  /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region. */
  disableGateway?: boolean;
  /** The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only. */
  virtualNetworkType?: VirtualNetworkType;
  /** Control Plane Apis version constraint for the API Management service. */
  apiVersionConstraint?: ApiVersionConstraint;
  /** Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored. */
  restore?: boolean;
  /** List of Private Endpoint Connections of this service. */
  privateEndpointConnections?: RemotePrivateEndpointConnectionWrapper[];
  /**
   * Compute Platform Version running the service in this location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly platformVersion?: PlatformVersion;
  /** Status of legacy portal in the API Management service. */
  legacyPortalStatus?: LegacyPortalStatus;
  /** Status of developer portal in this API Management service. */
  developerPortalStatus?: DeveloperPortalStatus;
  /** Publisher email. */
  publisherEmail: string;
  /** Publisher name. */
  publisherName: string;
}

/** Parameter supplied to Update Api Management Service. */
export interface ApiManagementServiceUpdateParameters extends ApimResource {
  /** SKU properties of the API Management service. */
  sku?: ApiManagementServiceSkuProperties;
  /** Managed service identity of the Api Management service. */
  identity?: ApiManagementServiceIdentity;
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** A list of availability zones denoting where the resource needs to come from. */
  zones?: string[];
  /** Email address from which the notification will be sent. */
  notificationSenderEmail?: string;
  /**
   * The current provisioning state of the API Management service which can be one of the following: Created/Activating/Succeeded/Updating/Failed/Stopped/Terminating/TerminationFailed/Deleted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /**
   * The provisioning state of the API Management service, which is targeted by the long running operation started on the service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly targetProvisioningState?: string;
  /**
   * Creation UTC date of the API Management service.The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdAtUtc?: Date;
  /**
   * Gateway URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayUrl?: string;
  /**
   * Gateway URL of the API Management service in the Default Region.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly gatewayRegionalUrl?: string;
  /**
   * Publisher portal endpoint Url of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly portalUrl?: string;
  /**
   * Management API endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managementApiUrl?: string;
  /**
   * SCM endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scmUrl?: string;
  /**
   * DEveloper Portal endpoint URL of the API Management service.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly developerPortalUrl?: string;
  /** Custom hostname configuration of the API Management service. */
  hostnameConfigurations?: HostnameConfiguration[];
  /**
   * Public Static Load Balanced IP addresses of the API Management service in Primary region. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly publicIPAddresses?: string[];
  /**
   * Private Static Load Balanced IP addresses of the API Management service in Primary region which is deployed in an Internal Virtual Network. Available only for Basic, Standard, Premium and Isolated SKU.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateIPAddresses?: string[];
  /** Public Standard SKU IP V4 based IP address to be associated with Virtual Network deployed service in the region. Supported only for Developer and Premium SKU being deployed in Virtual Network. */
  publicIpAddressId?: string;
  /** Whether or not public endpoint access is allowed for this API Management service.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'. If 'Disabled', private endpoints are the exclusive access method. Default value is 'Enabled' */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Configuration API configuration of the API Management service. */
  configurationApi?: ConfigurationApi;
  /** Virtual network configuration of the API Management service. */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /** Additional datacenter locations of the API Management service. */
  additionalLocations?: AdditionalLocation[];
  /** Custom properties of the API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TripleDes168` will disable the cipher TLS_RSA_WITH_3DES_EDE_CBC_SHA for all TLS(1.0, 1.1 and 1.2).</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls11` can be used to disable just TLS 1.1.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Protocols.Tls10` can be used to disable TLS 1.0 on an API Management service.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls11` can be used to disable just TLS 1.1 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Backend.Protocols.Tls10` can be used to disable TLS 1.0 for communications with backends.</br>Setting `Microsoft.WindowsAzure.ApiManagement.Gateway.Protocols.Server.Http2` can be used to enable HTTP2 protocol on an API Management service.</br>Not specifying any of these properties on PATCH operation will reset omitted properties' values to their defaults. For all the settings except Http2 the default value is `True` if the service was created on or before April 1, 2018 and `False` otherwise. Http2 setting's default value is `False`.</br></br>You can disable any of the following ciphers by using settings `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.[cipher_name]`: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA. For example, `Microsoft.WindowsAzure.ApiManagement.Gateway.Security.Ciphers.TLS_RSA_WITH_AES_128_CBC_SHA256`:`false`. The default value is `true` for them.</br> Note: The following ciphers can't be disabled since they are required by internal platform components: TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 */
  customProperties?: { [propertyName: string]: string };
  /** List of Certificates that need to be installed in the API Management service. Max supported certificates that can be installed is 10. */
  certificates?: CertificateConfiguration[];
  /** Property only meant to be used for Consumption SKU Service. This enforces a client certificate to be presented on each request to the gateway. This also enables the ability to authenticate the certificate in the policy on the gateway. */
  enableClientCertificate?: boolean;
  /** Property can be used to enable NAT Gateway for this API Management service. */
  natGatewayState?: NatGatewayState;
  /**
   * Outbound public IPV4 address prefixes associated with NAT Gateway deployed service. Available only for Premium SKU on stv2 platform.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly outboundPublicIPAddresses?: string[];
  /** Property only valid for an Api Management service deployed in multiple locations. This can be used to disable the gateway in master region. */
  disableGateway?: boolean;
  /** The type of VPN in which API Management service needs to be configured in. None (Default Value) means the API Management service is not part of any Virtual Network, External means the API Management deployment is set up inside a Virtual Network having an Internet Facing Endpoint, and Internal means that API Management deployment is setup inside a Virtual Network having an Intranet Facing Endpoint only. */
  virtualNetworkType?: VirtualNetworkType;
  /** Control Plane Apis version constraint for the API Management service. */
  apiVersionConstraint?: ApiVersionConstraint;
  /** Undelete Api Management Service if it was previously soft-deleted. If this flag is specified and set to True all other properties will be ignored. */
  restore?: boolean;
  /** List of Private Endpoint Connections of this service. */
  privateEndpointConnections?: RemotePrivateEndpointConnectionWrapper[];
  /**
   * Compute Platform Version running the service in this location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly platformVersion?: PlatformVersion;
  /** Status of legacy portal in the API Management service. */
  legacyPortalStatus?: LegacyPortalStatus;
  /** Status of developer portal in this API Management service. */
  developerPortalStatus?: DeveloperPortalStatus;
  /** Publisher email. */
  publisherEmail?: string;
  /** Publisher name. */
  publisherName?: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The Private Endpoint Connection resource. */
export interface PrivateEndpointConnection extends Resource {
  /** The resource of private end point. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of the private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: PrivateEndpointConnectionProvisioningState;
}

/** A private link resource */
export interface PrivateLinkResource extends Resource {
  /**
   * The private link resource group id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupId?: string;
  /**
   * The private link resource required member names.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** API Entity Properties */
export interface ApiContractProperties extends ApiEntityBaseContract {
  /** API identifier of the source API. */
  sourceApiId?: string;
  /** API name. Must be 1 to 300 characters long. */
  displayName?: string;
  /** Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long. */
  serviceUrl?: string;
  /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
  path: string;
  /** Describes on which protocols the operations in this API can be invoked. */
  protocols?: Protocol[];
  /** Version set details */
  apiVersionSet?: ApiVersionSetContractDetails;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** API update contract properties. */
export interface ApiContractUpdateProperties extends ApiEntityBaseContract {
  /** API name. */
  displayName?: string;
  /** Absolute URL of the backend service implementing this API. */
  serviceUrl?: string;
  /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
  path?: string;
  /** Describes on which protocols the operations in this API can be invoked. */
  protocols?: Protocol[];
}

/** API contract properties for the Tag Resources. */
export interface ApiTagResourceContractProperties
  extends ApiEntityBaseContract {
  /** API identifier in the form /apis/{apiId}. */
  id?: string;
  /** API name. */
  name?: string;
  /** Absolute URL of the backend service implementing this API. */
  serviceUrl?: string;
  /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
  path?: string;
  /** Describes on which protocols the operations in this API can be invoked. */
  protocols?: Protocol[];
}

/** Operation Contract Properties */
export interface OperationContractProperties
  extends OperationEntityBaseContract {
  /** Operation Name. */
  displayName: string;
  /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
  method: string;
  /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
  urlTemplate: string;
}

/** Operation Update Contract Properties. */
export interface OperationUpdateContractProperties
  extends OperationEntityBaseContract {
  /** Operation Name. */
  displayName?: string;
  /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
  method?: string;
  /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
  urlTemplate?: string;
}

/** Product profile. */
export interface ProductContractProperties extends ProductEntityBaseParameters {
  /** Product name. */
  displayName: string;
}

/** Product profile. */
export interface ProductTagResourceContractProperties
  extends ProductEntityBaseParameters {
  /** Identifier of the product in the form of /products/{productId} */
  id?: string;
  /** Product name. */
  name: string;
}

/** Parameters supplied to the Update Product operation. */
export interface ProductUpdateProperties extends ProductEntityBaseParameters {
  /** Product name. */
  displayName?: string;
}

/** Issue contract Properties. */
export interface IssueContractProperties extends IssueContractBaseProperties {
  /** The issue title. */
  title: string;
  /** Text describing the issue. */
  description: string;
  /** A resource identifier for the user created the issue. */
  userId: string;
}

/** Issue contract Update Properties. */
export interface IssueUpdateContractProperties
  extends IssueContractBaseProperties {
  /** The issue title. */
  title?: string;
  /** Text describing the issue. */
  description?: string;
  /** A resource identifier for the user created the issue. */
  userId?: string;
}

/** TagDescription contract Properties. */
export interface TagDescriptionContractProperties
  extends TagDescriptionBaseProperties {
  /** Identifier of the tag in the form of /tags/{tagId} */
  tagId?: string;
  /** Tag name. */
  displayName?: string;
}

/** Properties of an API Version Set. */
export interface ApiVersionSetContractProperties
  extends ApiVersionSetEntityBase {
  /** Name of API Version Set */
  displayName: string;
  /** An value that determines where the API Version identifier will be located in a HTTP request. */
  versioningScheme: VersioningScheme;
}

/** Properties used to create or update an API Version Set. */
export interface ApiVersionSetUpdateParametersProperties
  extends ApiVersionSetEntityBase {
  /** Name of API Version Set */
  displayName?: string;
  /** An value that determines where the API Version identifier will be located in a HTTP request. */
  versioningScheme?: VersioningScheme;
}

/** External OAuth authorization server settings Properties. */
export interface AuthorizationServerContractProperties
  extends AuthorizationServerContractBaseProperties {
  /** User-friendly authorization server name. */
  displayName: string;
  /** If true, the authorization server may be used in the developer portal test console. True by default if no value is provided. */
  useInTestConsole?: boolean;
  /** If true, the authorization server will be used in the API documentation in the developer portal. False by default if no value is provided. */
  useInApiDocumentation?: boolean;
  /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
  clientRegistrationEndpoint: string;
  /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
  authorizationEndpoint: string;
  /** Form of an authorization grant, which the client uses to request the access token. */
  grantTypes: GrantType[];
  /** Client or app id registered with this authorization server. */
  clientId: string;
  /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** External OAuth authorization server Update settings contract. */
export interface AuthorizationServerUpdateContractProperties
  extends AuthorizationServerContractBaseProperties {
  /** User-friendly authorization server name. */
  displayName?: string;
  /** If true, the authorization server may be used in the developer portal test console. True by default if no value is provided. */
  useInTestConsole?: boolean;
  /** If true, the authorization server will be used in the API documentation in the developer portal. False by default if no value is provided. */
  useInApiDocumentation?: boolean;
  /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
  clientRegistrationEndpoint?: string;
  /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
  authorizationEndpoint?: string;
  /** Form of an authorization grant, which the client uses to request the access token. */
  grantTypes?: GrantType[];
  /** Client or app id registered with this authorization server. */
  clientId?: string;
  /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** Parameters supplied to the Create Backend operation. */
export interface BackendContractProperties extends BackendBaseParameters {
  /** Runtime Url of the Backend. */
  url: string;
  /** Backend communication protocol. */
  protocol: BackendProtocol;
}

/** Parameters supplied to the Update Backend operation. */
export interface BackendUpdateParameterProperties
  extends BackendBaseParameters {
  /** Runtime Url of the Backend. */
  url?: string;
  /** Backend communication protocol. */
  protocol?: BackendProtocol;
}

export interface BackendBaseParametersPool extends BackendPool {}

/** KeyVault contract details. */
export interface KeyVaultContractProperties
  extends KeyVaultContractCreateProperties {
  /** Last time sync and refresh status of secret from key vault. */
  lastStatus?: KeyVaultLastAccessStatusContractProperties;
}

/** Properties of an API Management service resource description. */
export interface ApiManagementServiceProperties
  extends ApiManagementServiceBaseProperties {
  /** Publisher email. */
  publisherEmail: string;
  /** Publisher name. */
  publisherName: string;
}

/** Properties of an API Management service resource description. */
export interface ApiManagementServiceUpdateProperties
  extends ApiManagementServiceBaseProperties {
  /** Publisher email. */
  publisherEmail?: string;
  /** Publisher name. */
  publisherName?: string;
}

/** User profile. */
export interface UserContractProperties extends UserEntityBaseParameters {
  /** First name. */
  firstName?: string;
  /** Last name. */
  lastName?: string;
  /** Email address. */
  email?: string;
  /**
   * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  registrationDate?: Date;
  /**
   * Collection of groups user is part of.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groups?: GroupContractProperties[];
}

/** Parameters supplied to the Create User operation. */
export interface UserCreateParameterProperties
  extends UserEntityBaseParameters {
  /** Email address. Must not be empty and must be unique within the service instance. */
  email: string;
  /** First name. */
  firstName: string;
  /** Last name. */
  lastName: string;
  /** User Password. If no value is provided, a default password is generated. */
  password?: string;
  /** Determines the type of application which send the create user request. Default is legacy portal. */
  appType?: AppType;
  /** Determines the type of confirmation e-mail that will be sent to the newly created user. */
  confirmation?: Confirmation;
}

/** Parameters supplied to the Update User operation. */
export interface UserUpdateParametersProperties
  extends UserEntityBaseParameters {
  /** Email address. Must not be empty and must be unique within the service instance. */
  email?: string;
  /** User Password. */
  password?: string;
  /** First name. */
  firstName?: string;
  /** Last name. */
  lastName?: string;
}

/** The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users. */
export interface IdentityProviderContractProperties
  extends IdentityProviderBaseParameters {
  /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
  clientId: string;
  /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** The external Identity Providers like Facebook, Google, Microsoft, Twitter or Azure Active Directory which can be used to enable access to the API Management service developer portal for all users. */
export interface IdentityProviderCreateContractProperties
  extends IdentityProviderBaseParameters {
  /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
  clientId: string;
  /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret: string;
}

/** Parameters supplied to the Update Identity Provider operation. */
export interface IdentityProviderUpdateProperties
  extends IdentityProviderBaseParameters {
  /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
  clientId?: string;
  /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. */
  clientSecret?: string;
}

/** NamedValue Contract properties. */
export interface NamedValueContractProperties
  extends NamedValueEntityBaseParameters {
  /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
  displayName: string;
  /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  value?: string;
  /** KeyVault location details of the namedValue. */
  keyVault?: KeyVaultContractProperties;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** NamedValue Contract properties. */
export interface NamedValueCreateContractProperties
  extends NamedValueEntityBaseParameters {
  /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
  displayName: string;
  /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  value?: string;
  /** KeyVault location details of the namedValue. */
  keyVault?: KeyVaultContractCreateProperties;
}

/** NamedValue Contract properties. */
export interface NamedValueUpdateParameterProperties
  extends NamedValueEntityBaseParameters {
  /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
  displayName?: string;
  /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. */
  value?: string;
  /** KeyVault location details of the namedValue. */
  keyVault?: KeyVaultContractCreateProperties;
}

/** Properties of an API Management workspaceLinks resource. */
export interface ApiManagementWorkspaceLinksProperties
  extends WorkspaceLinksBaseProperties {}

/** AllPolicies Contract details. */
export interface AllPoliciesContract extends ProxyResource {
  /** Policy Identifier */
  referencePolicyId?: string;
  /** Policy Restriction Compliance State */
  complianceState?: PolicyComplianceState;
}

/** API details. */
export interface ApiContract extends ProxyResource {
  /** Description of the API. May include HTML formatting tags. */
  description?: string;
  /** Collection of authentication settings included into this API. */
  authenticationSettings?: AuthenticationSettingsContract;
  /** Protocols over which API is made available. */
  subscriptionKeyParameterNames?: SubscriptionKeyParameterNamesContract;
  /** Type of API. */
  apiType?: ApiType;
  /** Describes the revision of the API. If no value is provided, default revision 1 is created */
  apiRevision?: string;
  /** Indicates the version identifier of the API if the API is versioned */
  apiVersion?: string;
  /** Indicates if API revision is current api revision. */
  isCurrent?: boolean;
  /**
   * Indicates if API revision is accessible via the gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isOnline?: boolean;
  /** Description of the API Revision. */
  apiRevisionDescription?: string;
  /** Description of the API Version. */
  apiVersionDescription?: string;
  /** A resource identifier for the related ApiVersionSet. */
  apiVersionSetId?: string;
  /** Specifies whether an API or Product subscription is required for accessing the API. */
  subscriptionRequired?: boolean;
  /**  A URL to the Terms of Service for the API. MUST be in the format of a URL. */
  termsOfServiceUrl?: string;
  /** Contact information for the API. */
  contact?: ApiContactInformation;
  /** License information for the API. */
  license?: ApiLicenseInformation;
  /** API identifier of the source API. */
  sourceApiId?: string;
  /** API name. Must be 1 to 300 characters long. */
  displayName?: string;
  /** Absolute URL of the backend service implementing this API. Cannot be more than 2000 characters long. */
  serviceUrl?: string;
  /** Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API. */
  path?: string;
  /** Describes on which protocols the operations in this API can be invoked. */
  protocols?: Protocol[];
  /** Version set details */
  apiVersionSet?: ApiVersionSetContractDetails;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** ApiRelease details. */
export interface ApiReleaseContract extends ProxyResource {
  /** Identifier of the API the release belongs to. */
  apiId?: string;
  /**
   * The time the API was released. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDateTime?: Date;
  /**
   * The time the API release was updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedDateTime?: Date;
  /** Release Notes */
  notes?: string;
}

/** API Operation details. */
export interface OperationContract extends ProxyResource {
  /** Collection of URL template parameters. */
  templateParameters?: ParameterContract[];
  /** Description of the operation. May include HTML formatting tags. */
  description?: string;
  /** An entity containing request details. */
  request?: RequestContract;
  /** Array of Operation responses. */
  responses?: ResponseContract[];
  /** Operation Policies */
  policies?: string;
  /** Operation Name. */
  displayName?: string;
  /** A Valid HTTP Operation Method. Typical Http Methods like GET, PUT, POST but not limited by only them. */
  method?: string;
  /** Relative URL template identifying the target resource for this operation. May include parameters. Example: /customers/{cid}/orders/{oid}/?date={date} */
  urlTemplate?: string;
}

/** Policy Contract details. */
export interface PolicyContract extends ProxyResource {
  /** Contents of the Policy as defined by the format. */
  value?: string;
  /** Format of the policyContent. */
  format?: PolicyContentFormat;
}

/** Tag Contract details. */
export interface TagContract extends ProxyResource {
  /** Tag name. */
  displayName?: string;
}

/** GraphQL API Resolver details. */
export interface ResolverContract extends ProxyResource {
  /** Resolver Name. */
  displayName?: string;
  /** Path is type/field being resolved. */
  path?: string;
  /** Description of the resolver. May include HTML formatting tags. */
  description?: string;
}

/** Product details. */
export interface ProductContract extends ProxyResource {
  /** Product description. May include HTML formatting tags. */
  description?: string;
  /** Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process. */
  terms?: string;
  /** Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as "protected" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as "open" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true. */
  subscriptionRequired?: boolean;
  /** whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of false. */
  approvalRequired?: boolean;
  /** Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of false. */
  subscriptionsLimit?: number;
  /** whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is notPublished. */
  state?: ProductState;
  /** Product name. */
  displayName?: string;
}

/** API Schema Contract details. */
export interface SchemaContract extends ProxyResource {
  /** Must be a valid a media type used in a Content-Type header as defined in the RFC 2616. Media type of the schema document (e.g. application/json, application/xml). </br> - `Swagger` Schema use `application/vnd.ms-azure-apim.swagger.definitions+json` </br> - `WSDL` Schema use `application/vnd.ms-azure-apim.xsd+xml` </br> - `OpenApi` Schema use `application/vnd.oai.openapi.components+json` </br> - `WADL Schema` use `application/vnd.ms-azure-apim.wadl.grammars+xml` </br> - `OData Schema` use `application/vnd.ms-azure-apim.odata.schema` </br> - `gRPC Schema` use `text/protobuf`. */
  contentType?: string;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** Json escaped string defining the document representing the Schema. Used for schemas other than Swagger/OpenAPI. */
  value?: string;
  /** Types definitions. Used for Swagger/OpenAPI v1 schemas only, null otherwise. */
  definitions?: Record<string, unknown>;
  /** Types definitions. Used for Swagger/OpenAPI v2/v3 schemas only, null otherwise. */
  components?: Record<string, unknown>;
}

/** Diagnostic details. */
export interface DiagnosticContract extends ProxyResource {
  /** Specifies for what type of messages sampling settings should not apply. */
  alwaysLog?: AlwaysLog;
  /** Resource Id of a target logger. */
  loggerId?: string;
  /** Sampling settings for Diagnostic. */
  sampling?: SamplingSettings;
  /** Diagnostic settings for incoming/outgoing HTTP messages to the Gateway. */
  frontend?: PipelineDiagnosticSettings;
  /** Diagnostic settings for incoming/outgoing HTTP messages to the Backend */
  backend?: PipelineDiagnosticSettings;
  /** Log the ClientIP. Default is false. */
  logClientIp?: boolean;
  /** Sets correlation protocol to use for Application Insights diagnostics. */
  httpCorrelationProtocol?: HttpCorrelationProtocol;
  /** The verbosity level applied to traces emitted by trace policies. */
  verbosity?: Verbosity;
  /** The format of the Operation Name for Application Insights telemetries. Default is Name. */
  operationNameFormat?: OperationNameFormat;
  /** Emit custom metrics via emit-metric policy. Applicable only to Application Insights diagnostic settings. */
  metrics?: boolean;
}

/** Issue Contract details. */
export interface IssueContract extends ProxyResource {
  /** Date and time when the issue was created. */
  createdDate?: Date;
  /** Status of the issue. */
  state?: State;
  /** A resource identifier for the API the issue was created for. */
  apiId?: string;
  /** The issue title. */
  title?: string;
  /** Text describing the issue. */
  description?: string;
  /** A resource identifier for the user created the issue. */
  userId?: string;
}

/** Issue Comment Contract details. */
export interface IssueCommentContract extends ProxyResource {
  /** Comment text. */
  text?: string;
  /** Date and time when the comment was created. */
  createdDate?: Date;
  /** A resource identifier for the user who left the comment. */
  userId?: string;
}

/** Issue Attachment Contract details. */
export interface IssueAttachmentContract extends ProxyResource {
  /** Filename by which the binary data will be saved. */
  title?: string;
  /** Either 'link' if content is provided via an HTTP link or the MIME type of the Base64-encoded binary data provided in the 'content' property. */
  contentFormat?: string;
  /** An HTTP link or Base64-encoded binary data. */
  content?: string;
}

/** Contract details. */
export interface TagDescriptionContract extends ProxyResource {
  /** Description of the Tag. */
  description?: string;
  /** Absolute URL of external resources describing the tag. */
  externalDocsUrl?: string;
  /** Description of the external resources describing the tag. */
  externalDocsDescription?: string;
  /** Identifier of the tag in the form of /tags/{tagId} */
  tagId?: string;
  /** Tag name. */
  displayName?: string;
}

/** Wiki properties */
export interface WikiContract extends ProxyResource {
  /** Collection wiki documents included into this wiki. */
  documents?: WikiDocumentationContract[];
}

/** API Version Set Contract details. */
export interface ApiVersionSetContract extends ProxyResource {
  /** Description of API Version Set. */
  description?: string;
  /** Name of query parameter that indicates the API Version if versioningScheme is set to `query`. */
  versionQueryName?: string;
  /** Name of HTTP header parameter that indicates the API Version if versioningScheme is set to `header`. */
  versionHeaderName?: string;
  /** Name of API Version Set */
  displayName?: string;
  /** An value that determines where the API Version identifier will be located in a HTTP request. */
  versioningScheme?: VersioningScheme;
}

/** Authorization Provider contract. */
export interface AuthorizationProviderContract extends ProxyResource {
  /** Authorization Provider name. Must be 1 to 300 characters long. */
  displayName?: string;
  /** Identity provider name. Must be 1 to 300 characters long. */
  identityProvider?: string;
  /** OAuth2 settings */
  oauth2?: AuthorizationProviderOAuth2Settings;
}

/** Authorization contract. */
export interface AuthorizationContract extends ProxyResource {
  /** Authorization type options */
  authorizationType?: AuthorizationType;
  /** OAuth2 grant type options */
  oAuth2GrantType?: OAuth2GrantType;
  /** Authorization parameters */
  parameters?: { [propertyName: string]: string };
  /** Authorization error details. */
  error?: AuthorizationError;
  /** Status of the Authorization */
  status?: string;
}

/** Authorization access policy contract. */
export interface AuthorizationAccessPolicyContract extends ProxyResource {
  /** The allowed Azure Active Directory Application IDs */
  appIds?: string[];
  /** The Tenant Id */
  tenantId?: string;
  /** The Object Id */
  objectId?: string;
}

/** External OAuth authorization server settings. */
export interface AuthorizationServerContract extends ProxyResource {
  /** Description of the authorization server. Can contain HTML formatting tags. */
  description?: string;
  /** HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. */
  authorizationMethods?: AuthorizationMethod[];
  /** Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /** Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}. */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /** OAuth token endpoint. Contains absolute URI to entity being referenced. */
  tokenEndpoint?: string;
  /** If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security. */
  supportState?: boolean;
  /** Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values. */
  defaultScope?: string;
  /** Specifies the mechanism by which access token is passed to the API. */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
  resourceOwnerUsername?: string;
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
  resourceOwnerPassword?: string;
  /** User-friendly authorization server name. */
  displayName?: string;
  /** If true, the authorization server may be used in the developer portal test console. True by default if no value is provided. */
  useInTestConsole?: boolean;
  /** If true, the authorization server will be used in the API documentation in the developer portal. False by default if no value is provided. */
  useInApiDocumentation?: boolean;
  /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
  clientRegistrationEndpoint?: string;
  /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
  authorizationEndpoint?: string;
  /** Form of an authorization grant, which the client uses to request the access token. */
  grantTypes?: GrantType[];
  /** Client or app id registered with this authorization server. */
  clientId?: string;
  /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** External OAuth authorization server settings. */
export interface AuthorizationServerUpdateContract extends ProxyResource {
  /** Description of the authorization server. Can contain HTML formatting tags. */
  description?: string;
  /** HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional. */
  authorizationMethods?: AuthorizationMethod[];
  /** Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format. */
  clientAuthenticationMethod?: ClientAuthenticationMethod[];
  /** Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {"name" : "name value", "value": "a value"}. */
  tokenBodyParameters?: TokenBodyParameterContract[];
  /** OAuth token endpoint. Contains absolute URI to entity being referenced. */
  tokenEndpoint?: string;
  /** If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security. */
  supportState?: boolean;
  /** Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values. */
  defaultScope?: string;
  /** Specifies the mechanism by which access token is passed to the API. */
  bearerTokenSendingMethods?: BearerTokenSendingMethod[];
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username. */
  resourceOwnerUsername?: string;
  /** Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password. */
  resourceOwnerPassword?: string;
  /** User-friendly authorization server name. */
  displayName?: string;
  /** If true, the authorization server may be used in the developer portal test console. True by default if no value is provided. */
  useInTestConsole?: boolean;
  /** If true, the authorization server will be used in the API documentation in the developer portal. False by default if no value is provided. */
  useInApiDocumentation?: boolean;
  /** Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced. */
  clientRegistrationEndpoint?: string;
  /** OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2. */
  authorizationEndpoint?: string;
  /** Form of an authorization grant, which the client uses to request the access token. */
  grantTypes?: GrantType[];
  /** Client or app id registered with this authorization server. */
  clientId?: string;
  /** Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** Backend details. */
export interface BackendContract extends ProxyResource {
  /** Backend Title. */
  title?: string;
  /** Backend Description. */
  description?: string;
  /** Management Uri of the Resource in External System. This URL can be the Arm Resource Id of Logic Apps, Function Apps or API Apps. */
  resourceId?: string;
  /** Backend Properties contract */
  properties?: BackendProperties;
  /** Backend Credentials Contract Properties */
  credentials?: BackendCredentialsContract;
  /** Backend gateway Contract Properties */
  proxy?: BackendProxyContract;
  /** Backend TLS Properties */
  tls?: BackendTlsProperties;
  /** Backend Circuit Breaker Configuration */
  circuitBreaker?: BackendCircuitBreaker;
  pool?: BackendBaseParametersPool;
  /** Type of the backend. A backend can be either Single or Pool. */
  typePropertiesType?: BackendType;
  /** Runtime Url of the Backend. */
  url?: string;
  /** Backend communication protocol. */
  protocol?: BackendProtocol;
}

/** Reconnect request parameters. */
export interface BackendReconnectContract extends ProxyResource {
  /** Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the Reconnect is PT2M. */
  after?: string;
}

/** Cache details. */
export interface CacheContract extends ProxyResource {
  /** Cache description */
  description?: string;
  /** Runtime connection string to cache */
  connectionString?: string;
  /** Location identifier to use cache from (should be either 'default' or valid Azure region identifier) */
  useFromLocation?: string;
  /** Original uri of entity in external system cache points to */
  resourceId?: string;
}

/** Certificate details. */
export interface CertificateContract extends ProxyResource {
  /** Subject attribute of the certificate. */
  subject?: string;
  /** Thumbprint of the certificate. */
  thumbprint?: string;
  /**
   * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expirationDate?: Date;
  /** KeyVault location details of the certificate. */
  keyVault?: KeyVaultContractProperties;
}

/** Content type contract details. */
export interface ContentTypeContract extends ProxyResource {
  /** Content type identifier */
  idPropertiesId?: string;
  /** Content type name. Must be 1 to 250 characters long. */
  namePropertiesName?: string;
  /** Content type description. */
  description?: string;
  /** Content type schema. */
  schema?: Record<string, unknown>;
  /** Content type version. */
  version?: string;
}

/** Content type contract details. */
export interface ContentItemContract extends ProxyResource {
  /** Properties of the content item. */
  properties?: { [propertyName: string]: any };
}

/** Deleted API Management Service information. */
export interface DeletedServiceContract extends ProxyResource {
  /**
   * API Management Service Master Location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /** Fully-qualified API Management Service Resource ID */
  serviceId?: string;
  /** UTC Date and Time when the service will be automatically purged. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard. */
  scheduledPurgeDate?: Date;
  /** UTC Timestamp when the service was soft-deleted. The date conforms to the following format: yyyy-MM-ddTHH:mm:ssZ as specified by the ISO 8601 standard. */
  deletionDate?: Date;
}

/** Markdown documentation details. */
export interface DocumentationContract extends ProxyResource {
  /** documentation title. */
  title?: string;
  /** Markdown documentation content. */
  content?: string;
}

/** Email Template details. */
export interface EmailTemplateContract extends ProxyResource {
  /** Subject of the Template. */
  subject?: string;
  /** Email Template Body. This should be a valid XDocument */
  body?: string;
  /** Title of the Template. */
  title?: string;
  /** Description of the Email Template. */
  description?: string;
  /**
   * Whether the template is the default template provided by API Management or has been edited.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDefault?: boolean;
  /** Email Template Parameter values. */
  parameters?: EmailTemplateParametersContractProperties[];
}

/** A single API Management gateway resource in List or Get response. */
export interface ApiManagementGatewayConfigConnectionResource
  extends ProxyResource {
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /**
   * The current provisioning state of the API Management gateway config connection
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The link to the API Management service workspace. */
  sourceId?: string;
  /**
   * The default hostname of the data-plane gateway.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly defaultHostname?: string;
  /** The hostnames of the data-plane gateway to which requests can be sent. */
  hostnames?: string[];
}

/** Gateway details. */
export interface GatewayContract extends ProxyResource {
  /** Gateway location. */
  locationData?: ResourceLocationDataContract;
  /** Gateway description */
  description?: string;
}

/** Gateway hostname configuration details. */
export interface GatewayHostnameConfigurationContract extends ProxyResource {
  /** Hostname value. Supports valid domain name, partial or full wildcard */
  hostname?: string;
  /** Identifier of Certificate entity that will be used for TLS connection establishment */
  certificateId?: string;
  /** Determines whether gateway requests client certificate */
  negotiateClientCertificate?: boolean;
  /** Specifies if TLS 1.0 is supported */
  tls10Enabled?: boolean;
  /** Specifies if TLS 1.1 is supported */
  tls11Enabled?: boolean;
  /** Specifies if HTTP/2.0 is supported */
  http2Enabled?: boolean;
}

/** Association entity details. */
export interface AssociationContract extends ProxyResource {
  /** Provisioning state. */
  provisioningState?: "created";
}

/** Gateway certificate authority details. */
export interface GatewayCertificateAuthorityContract extends ProxyResource {
  /** Determines whether certificate authority is trusted. */
  isTrusted?: boolean;
}

/** Contract details. */
export interface GroupContract extends ProxyResource {
  /** Group name. */
  displayName?: string;
  /** Group description. Can contain HTML formatting tags. */
  description?: string;
  /**
   * true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly builtIn?: boolean;
  /** Group type. */
  typePropertiesType?: GroupType;
  /** For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory `aad://<tenant>.onmicrosoft.com/groups/<group object id>`; otherwise the value is null. */
  externalId?: string;
}

/** User details. */
export interface UserContract extends ProxyResource {
  /** Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active. */
  state?: UserState;
  /** Optional note about a user set by the administrator. */
  note?: string;
  /** Collection of user identities. */
  identities?: UserIdentityContract[];
  /** First name. */
  firstName?: string;
  /** Last name. */
  lastName?: string;
  /** Email address. */
  email?: string;
  /**
   * Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  registrationDate?: Date;
  /**
   * Collection of groups user is part of.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groups?: GroupContractProperties[];
}

/** Identity Provider details. */
export interface IdentityProviderContract extends ProxyResource {
  /** Identity Provider Type identifier. */
  typePropertiesType?: IdentityProviderType;
  /** The TenantId to use instead of Common when logging into Active Directory */
  signinTenant?: string;
  /** List of Allowed Tenants when configuring Azure Active Directory login. */
  allowedTenants?: string[];
  /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
  authority?: string;
  /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
  signupPolicyName?: string;
  /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
  signinPolicyName?: string;
  /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
  profileEditingPolicyName?: string;
  /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
  passwordResetPolicyName?: string;
  /** The client library to be used in the developer portal. Only applies to AAD and AAD B2C Identity Provider. */
  clientLibrary?: string;
  /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
  clientId?: string;
  /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** Identity Provider details. */
export interface IdentityProviderCreateContract extends ProxyResource {
  /** Identity Provider Type identifier. */
  typePropertiesType?: IdentityProviderType;
  /** The TenantId to use instead of Common when logging into Active Directory */
  signinTenant?: string;
  /** List of Allowed Tenants when configuring Azure Active Directory login. */
  allowedTenants?: string[];
  /** OpenID Connect discovery endpoint hostname for AAD or AAD B2C. */
  authority?: string;
  /** Signup Policy Name. Only applies to AAD B2C Identity Provider. */
  signupPolicyName?: string;
  /** Signin Policy Name. Only applies to AAD B2C Identity Provider. */
  signinPolicyName?: string;
  /** Profile Editing Policy Name. Only applies to AAD B2C Identity Provider. */
  profileEditingPolicyName?: string;
  /** Password Reset Policy Name. Only applies to AAD B2C Identity Provider. */
  passwordResetPolicyName?: string;
  /** The client library to be used in the developer portal. Only applies to AAD and AAD B2C Identity Provider. */
  clientLibrary?: string;
  /** Client Id of the Application in the external Identity Provider. It is App ID for Facebook login, Client ID for Google login, App ID for Microsoft. */
  clientId?: string;
  /** Client secret of the Application in external Identity Provider, used to authenticate login request. For example, it is App Secret for Facebook login, API Key for Google login, Public Key for Microsoft. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  clientSecret?: string;
}

/** Logger details. */
export interface LoggerContract extends ProxyResource {
  /** Logger type. */
  loggerType?: LoggerType;
  /** Logger description. */
  description?: string;
  /**
   * The name and SendRule connection string of the event hub for azureEventHub logger.
   * Instrumentation key for applicationInsights logger.
   */
  credentials?: { [propertyName: string]: string };
  /** Whether records are buffered in the logger before publishing. Default is assumed to be true. */
  isBuffered?: boolean;
  /** Azure Resource Id of a log target (either Azure Event Hub resource or Azure Application Insights resource). */
  resourceId?: string;
}

/** NamedValue details. */
export interface NamedValueContract extends ProxyResource {
  /** Optional tags that when provided can be used to filter the NamedValue list. */
  tags?: string[];
  /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
  secret?: boolean;
  /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
  displayName?: string;
  /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  value?: string;
  /** KeyVault location details of the namedValue. */
  keyVault?: KeyVaultContractProperties;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** NamedValue details. */
export interface NamedValueCreateContract extends ProxyResource {
  /** Optional tags that when provided can be used to filter the NamedValue list. */
  tags?: string[];
  /** Determines whether the value is a secret and should be encrypted or not. Default value is false. */
  secret?: boolean;
  /** Unique name of NamedValue. It may contain only letters, digits, period, dash, and underscore characters. */
  displayName?: string;
  /** Value of the NamedValue. Can contain policy expressions. It may not be empty or consist only of whitespace. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  value?: string;
  /** KeyVault location details of the namedValue. */
  keyVault?: KeyVaultContractCreateProperties;
}

/** Notification details. */
export interface NotificationContract extends ProxyResource {
  /** Title of the Notification. */
  title?: string;
  /** Description of the Notification. */
  description?: string;
  /** Recipient Parameter values. */
  recipients?: RecipientsContractProperties;
}

/** Recipient User details. */
export interface RecipientUserContract extends ProxyResource {
  /** API Management UserId subscribed to notification. */
  userId?: string;
}

/** Recipient Email details. */
export interface RecipientEmailContract extends ProxyResource {
  /** User Email subscribed to notification. */
  email?: string;
}

/** OpenId Connect Provider details. */
export interface OpenidConnectProviderContract extends ProxyResource {
  /** User-friendly OpenID Connect Provider name. */
  displayName?: string;
  /** User-friendly description of OpenID Connect Provider. */
  description?: string;
  /** Metadata endpoint URI. */
  metadataEndpoint?: string;
  /** Client ID of developer console which is the client application. */
  clientId?: string;
  /** Client Secret of developer console which is the client application. */
  clientSecret?: string;
  /** If true, the Open ID Connect provider may be used in the developer portal test console. True by default if no value is provided. */
  useInTestConsole?: boolean;
  /** If true, the Open ID Connect provider will be used in the API documentation in the developer portal. False by default if no value is provided. */
  useInApiDocumentation?: boolean;
}

/** Policy description details. */
export interface PolicyDescriptionContract extends ProxyResource {
  /**
   * Policy description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Binary OR value of the Snippet scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scope?: number;
}

/** Policy fragment contract details. */
export interface PolicyFragmentContract extends ProxyResource {
  /** Contents of the policy fragment. */
  value?: string;
  /** Policy fragment description. */
  description?: string;
  /** Format of the policy fragment content. */
  format?: PolicyFragmentContentFormat;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

export interface ResourceCollectionValueItem extends ProxyResource {}

/** Policy restriction contract details. */
export interface PolicyRestrictionContract extends ProxyResource {
  /** Path to the policy document. */
  scope?: string;
  /** Indicates if base policy should be enforced for the policy document. */
  requireBase?: PolicyRestrictionRequireBase;
}

/** Long Running Git Operation Results. */
export interface OperationResultContract extends ProxyResource {
  /** Operation result identifier. */
  idPropertiesId?: string;
  /** Status of an async operation. */
  status?: AsyncOperationStatus;
  /**
   * Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  started?: Date;
  /**
   * Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  updated?: Date;
  /** Optional result info. */
  resultInfo?: string;
  /** Error Body Contract */
  error?: ErrorResponseBody;
  /**
   * This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionLog?: OperationResultLogItemContract[];
}

/** The developer portal configuration contract. */
export interface PortalConfigContract extends ProxyResource {
  /** Enable or disable Basic authentication method. */
  enableBasicAuth?: boolean;
  signin?: PortalConfigPropertiesSignin;
  signup?: PortalConfigPropertiesSignup;
  /** The developer portal delegation settings. */
  delegation?: PortalConfigDelegationProperties;
  /** The developer portal Cross-Origin Resource Sharing (CORS) settings. */
  cors?: PortalConfigCorsProperties;
  /** The developer portal Content Security Policy (CSP) settings. */
  csp?: PortalConfigCspProperties;
}

/** Portal Revision's contract details. */
export interface PortalRevisionContract extends ProxyResource {
  /** Portal revision description. */
  description?: string;
  /**
   * Portal revision publishing status details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly statusDetails?: string;
  /**
   * Status of the portal's revision.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: PortalRevisionStatus;
  /** Indicates if the portal's revision is public. */
  isCurrent?: boolean;
  /**
   * Portal's revision creation date and time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDateTime?: Date;
  /**
   * Last updated date and time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly updatedDateTime?: Date;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Portal Settings for the Developer Portal. */
export interface PortalSettingsContract extends ProxyResource {
  /** A delegation Url. */
  url?: string;
  /** A base64-encoded validation key to validate, that a request is coming from Azure API Management. */
  validationKey?: string;
  /** Subscriptions delegation settings. */
  subscriptions?: SubscriptionsDelegationSettingsProperties;
  /** User registration delegation settings. */
  userRegistration?: RegistrationDelegationSettingsProperties;
  /** Redirect Anonymous users to the Sign-In page. */
  enabled?: boolean;
  /** Terms of service contract properties. */
  termsOfService?: TermsOfServiceProperties;
}

/** Sign-In settings for the Developer Portal. */
export interface PortalSigninSettings extends ProxyResource {
  /** Redirect Anonymous users to the Sign-In page. */
  enabled?: boolean;
}

/** Sign-Up settings for a developer portal. */
export interface PortalSignupSettings extends ProxyResource {
  /** Allow users to sign up on a developer portal. */
  enabled?: boolean;
  /** Terms of service contract properties. */
  termsOfService?: TermsOfServiceProperties;
}

/** Delegation settings for a developer portal. */
export interface PortalDelegationSettings extends ProxyResource {
  /** A delegation Url. */
  url?: string;
  /** A base64-encoded validation key to validate, that a request is coming from Azure API Management. */
  validationKey?: string;
  /** Subscriptions delegation settings. */
  subscriptions?: SubscriptionsDelegationSettingsProperties;
  /** User registration delegation settings. */
  userRegistration?: RegistrationDelegationSettingsProperties;
}

/** Subscription details. */
export interface SubscriptionContract extends ProxyResource {
  /** The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier. */
  ownerId?: string;
  /** Scope like /products/{productId} or /apis or /apis/{apiId}. */
  scope?: string;
  /** The name of the subscription, or null if the subscription has no name. */
  displayName?: string;
  /** Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated. */
  state?: SubscriptionState;
  /**
   * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdDate?: Date;
  /**
   * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  startDate?: Date;
  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  expirationDate?: Date;
  /**
   * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  endDate?: Date;
  /**
   * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  notificationDate?: Date;
  /** Subscription primary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  primaryKey?: string;
  /** Subscription secondary key. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value. */
  secondaryKey?: string;
  /** Optional subscription comment added by an administrator when the state is changed to the 'rejected'. */
  stateComment?: string;
  /** Determines whether tracing is enabled */
  allowTracing?: boolean;
}

/** Product-API link details. */
export interface ProductApiLinkContract extends ProxyResource {
  /** Full resource Id of an API. */
  apiId?: string;
}

/** Product-group link details. */
export interface ProductGroupLinkContract extends ProxyResource {
  /** Full resource Id of a group. */
  groupId?: string;
}

/** Global Schema Contract details. */
export interface GlobalSchemaContract extends ProxyResource {
  /** Schema Type. Immutable. */
  schemaType?: SchemaType;
  /** Free-form schema entity description. */
  description?: string;
  /** Json-encoded string for non json-based schema. */
  value?: any;
  /** Global Schema document object for json-based schema formats(e.g. json schema). */
  document?: Record<string, unknown>;
  /**
   * The provisioning state
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
}

/** Tenant Settings. */
export interface TenantSettingsContract extends ProxyResource {
  /** Tenant settings */
  settings?: { [propertyName: string]: string };
}

/** Tag-API link details. */
export interface TagApiLinkContract extends ProxyResource {
  /** Full resource Id of an API. */
  apiId?: string;
}

/** Tag-operation link details. */
export interface TagOperationLinkContract extends ProxyResource {
  /** Full resource Id of an API operation. */
  operationId?: string;
}

/** Tag-product link details. */
export interface TagProductLinkContract extends ProxyResource {
  /** Full resource Id of a product. */
  productId?: string;
}

/** Tenant Settings. */
export interface AccessInformationContract extends ProxyResource {
  /** Access Information type ('access' or 'gitAccess') */
  idPropertiesId?: string;
  /** Principal (User) Identifier. */
  principalId?: string;
  /** Determines whether direct access is enabled. */
  enabled?: boolean;
}

/** Result of Tenant Configuration Sync State. */
export interface TenantConfigurationSyncStateContract extends ProxyResource {
  /** The name of Git branch. */
  branch?: string;
  /** The latest commit Id. */
  commitId?: string;
  /** value indicating if last sync was save (true) or deploy (false) operation. */
  isExport?: boolean;
  /** value indicating if last synchronization was later than the configuration change. */
  isSynced?: boolean;
  /** value indicating whether Git configuration access is enabled. */
  isGitEnabled?: boolean;
  /**
   * The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  syncDate?: Date;
  /**
   * The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  configurationChangeDate?: Date;
  /** Most recent tenant configuration operation identifier */
  lastOperationId?: string;
}

/** Diagnostic details. */
export interface DiagnosticUpdateContract extends ProxyResource {
  /** Specifies for what type of messages sampling settings should not apply. */
  alwaysLog?: AlwaysLog;
  /** Resource Id of a target logger. */
  loggerId?: string;
  /** Sampling settings for Diagnostic. */
  sampling?: SamplingSettings;
  /** Diagnostic settings for incoming/outgoing HTTP messages to the Gateway. */
  frontend?: PipelineDiagnosticSettings;
  /** Diagnostic settings for incoming/outgoing HTTP messages to the Backend */
  backend?: PipelineDiagnosticSettings;
  /** Log the ClientIP. Default is false. */
  logClientIp?: boolean;
  /** Sets correlation protocol to use for Application Insights diagnostics. */
  httpCorrelationProtocol?: HttpCorrelationProtocol;
  /** The verbosity level applied to traces emitted by trace policies. */
  verbosity?: Verbosity;
  /** The format of the Operation Name for Application Insights telemetries. Default is Name. */
  operationNameFormat?: OperationNameFormat;
  /** Emit custom metrics via emit-metric policy. Applicable only to Application Insights diagnostic settings. */
  metrics?: boolean;
}

/** A single API Management WorkspaceLinks in List or Get response. */
export interface ApiManagementWorkspaceLinksResource extends ProxyResource {
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly etag?: string;
  /** The link to the API Management service workspace. */
  workspaceId?: string;
  /** The array of linked gateways. */
  gateways?: WorkspaceLinksGateway[];
}

/** Workspace details. */
export interface WorkspaceContract extends ProxyResource {
  /** Name of the workspace. */
  displayName?: string;
  /** Description of the workspace. */
  description?: string;
}

/** Policy Contract details. */
export interface PolicyWithComplianceContract extends ProxyResource {
  /** Policy Identifier */
  referencePolicyId?: string;
  /** Policy Restriction Compliance State */
  complianceState?: PolicyComplianceState;
}

/** Long Running Git Resolver Results. */
export interface ResolverResultContract extends ProxyResource {
  /** Resolver result identifier. */
  idPropertiesId?: string;
  /** Status of an async resolver. */
  status?: AsyncResolverStatus;
  /**
   * Start time of an async resolver. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  started?: Date;
  /**
   * Last update time of an async resolver. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard.
   *
   */
  updated?: Date;
  /** Optional result info. */
  resultInfo?: string;
  /** Error Body Contract */
  error?: ErrorResponseBody;
  /**
   * This property if only provided as part of the TenantConfiguration_Validate resolver. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy resolver.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionLog?: ResolverResultLogItemContract[];
}

/** API Create or Update Properties. */
export interface ApiCreateOrUpdateProperties extends ApiContractProperties {
  /** Content value when Importing an API. */
  value?: string;
  /** Format of the Content in which the API is getting imported. New formats can be added in the future */
  format?: ContentFormat;
  /** Criteria to limit import of WSDL to a subset of the document. */
  wsdlSelector?: ApiCreateOrUpdatePropertiesWsdlSelector;
  /**
   * Type of API to create.
   *  * `http` creates a REST API
   *  * `soap` creates a SOAP pass-through API
   *  * `websocket` creates websocket API
   *  * `graphql` creates GraphQL API.
   *  New types can be added in the future.
   */
  soapApiType?: SoapApiType;
  /** Strategy of translating required query parameters to template ones. By default has value 'template'. Possible values: 'template', 'query' */
  translateRequiredQueryParametersConduct?: TranslateRequiredQueryParametersConduct;
}

/** Defines headers for ApiGateway_update operation. */
export interface ApiGatewayUpdateHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for ApiGateway_delete operation. */
export interface ApiGatewayDeleteHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for Api_getEntityTag operation. */
export interface ApiGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Api_get operation. */
export interface ApiGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Api_createOrUpdate operation. */
export interface ApiCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
  /** Location header contains the URL where the status of the long running operation can be checked */
  location?: string;
  /** Azure-AsyncOperation header contains the URL where the status of the long running operation can be checked */
  azureAsyncOperation?: string;
}

/** Defines headers for Api_update operation. */
export interface ApiUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Api_delete operation. */
export interface ApiDeleteHeaders {
  /** Location header */
  location?: string;
  /** Azure-AsyncOperation header contains the URL where the status of the long running operation can be checked */
  azureAsyncOperation?: string;
}

/** Defines headers for ApiRelease_getEntityTag operation. */
export interface ApiReleaseGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiRelease_get operation. */
export interface ApiReleaseGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiRelease_createOrUpdate operation. */
export interface ApiReleaseCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiRelease_update operation. */
export interface ApiReleaseUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperation_getEntityTag operation. */
export interface ApiOperationGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperation_get operation. */
export interface ApiOperationGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperation_createOrUpdate operation. */
export interface ApiOperationCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperation_update operation. */
export interface ApiOperationUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperationPolicy_getEntityTag operation. */
export interface ApiOperationPolicyGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperationPolicy_get operation. */
export interface ApiOperationPolicyGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiOperationPolicy_createOrUpdate operation. */
export interface ApiOperationPolicyCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getEntityStateByOperation operation. */
export interface TagGetEntityStateByOperationHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getByOperation operation. */
export interface TagGetByOperationHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getEntityStateByApi operation. */
export interface TagGetEntityStateByApiHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getByApi operation. */
export interface TagGetByApiHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_assignToApi operation. */
export interface TagAssignToApiHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getEntityStateByProduct operation. */
export interface TagGetEntityStateByProductHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getByProduct operation. */
export interface TagGetByProductHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_getEntityState operation. */
export interface TagGetEntityStateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_get operation. */
export interface TagGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_createOrUpdate operation. */
export interface TagCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Tag_update operation. */
export interface TagUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolver_getEntityTag operation. */
export interface GraphQLApiResolverGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolver_get operation. */
export interface GraphQLApiResolverGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolver_createOrUpdate operation. */
export interface GraphQLApiResolverCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolver_update operation. */
export interface GraphQLApiResolverUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolverPolicy_getEntityTag operation. */
export interface GraphQLApiResolverPolicyGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolverPolicy_get operation. */
export interface GraphQLApiResolverPolicyGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GraphQLApiResolverPolicy_createOrUpdate operation. */
export interface GraphQLApiResolverPolicyCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiPolicy_getEntityTag operation. */
export interface ApiPolicyGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiPolicy_get operation. */
export interface ApiPolicyGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiPolicy_createOrUpdate operation. */
export interface ApiPolicyCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiSchema_getEntityTag operation. */
export interface ApiSchemaGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiSchema_get operation. */
export interface ApiSchemaGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiSchema_createOrUpdate operation. */
export interface ApiSchemaCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
  /** Location header contains the URL where the status of the long running operation can be checked */
  location?: string;
  /** Azure-AsyncOperation header contains the URL where the status of the long running operation can be checked */
  azureAsyncOperation?: string;
}

/** Defines headers for ApiDiagnostic_getEntityTag operation. */
export interface ApiDiagnosticGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiDiagnostic_get operation. */
export interface ApiDiagnosticGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiDiagnostic_createOrUpdate operation. */
export interface ApiDiagnosticCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiDiagnostic_update operation. */
export interface ApiDiagnosticUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssue_getEntityTag operation. */
export interface ApiIssueGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssue_get operation. */
export interface ApiIssueGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssue_createOrUpdate operation. */
export interface ApiIssueCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssue_update operation. */
export interface ApiIssueUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssueComment_getEntityTag operation. */
export interface ApiIssueCommentGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssueComment_get operation. */
export interface ApiIssueCommentGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssueComment_createOrUpdate operation. */
export interface ApiIssueCommentCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssueAttachment_getEntityTag operation. */
export interface ApiIssueAttachmentGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssueAttachment_get operation. */
export interface ApiIssueAttachmentGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiIssueAttachment_createOrUpdate operation. */
export interface ApiIssueAttachmentCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiTagDescription_getEntityTag operation. */
export interface ApiTagDescriptionGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiTagDescription_get operation. */
export interface ApiTagDescriptionGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiTagDescription_createOrUpdate operation. */
export interface ApiTagDescriptionCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiWiki_getEntityTag operation. */
export interface ApiWikiGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiWiki_get operation. */
export interface ApiWikiGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiWiki_createOrUpdate operation. */
export interface ApiWikiCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiWiki_update operation. */
export interface ApiWikiUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiVersionSet_getEntityTag operation. */
export interface ApiVersionSetGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiVersionSet_get operation. */
export interface ApiVersionSetGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiVersionSet_createOrUpdate operation. */
export interface ApiVersionSetCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiVersionSet_update operation. */
export interface ApiVersionSetUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationProvider_get operation. */
export interface AuthorizationProviderGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationProvider_createOrUpdate operation. */
export interface AuthorizationProviderCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Authorization_get operation. */
export interface AuthorizationGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Authorization_createOrUpdate operation. */
export interface AuthorizationCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Authorization_confirmConsentCode operation. */
export interface AuthorizationConfirmConsentCodeHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationLoginLinks_post operation. */
export interface AuthorizationLoginLinksPostHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationAccessPolicy_get operation. */
export interface AuthorizationAccessPolicyGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationAccessPolicy_createOrUpdate operation. */
export interface AuthorizationAccessPolicyCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationServer_getEntityTag operation. */
export interface AuthorizationServerGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationServer_get operation. */
export interface AuthorizationServerGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationServer_createOrUpdate operation. */
export interface AuthorizationServerCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationServer_update operation. */
export interface AuthorizationServerUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for AuthorizationServer_listSecrets operation. */
export interface AuthorizationServerListSecretsHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Backend_getEntityTag operation. */
export interface BackendGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Backend_get operation. */
export interface BackendGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Backend_createOrUpdate operation. */
export interface BackendCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Backend_update operation. */
export interface BackendUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Cache_getEntityTag operation. */
export interface CacheGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Cache_get operation. */
export interface CacheGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Cache_createOrUpdate operation. */
export interface CacheCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Cache_update operation. */
export interface CacheUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Certificate_getEntityTag operation. */
export interface CertificateGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Certificate_get operation. */
export interface CertificateGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Certificate_createOrUpdate operation. */
export interface CertificateCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Certificate_refreshSecret operation. */
export interface CertificateRefreshSecretHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiManagementClient_performConnectivityCheckAsync operation. */
export interface ApiManagementClientPerformConnectivityCheckAsyncHeaders {
  location?: string;
}

/** Defines headers for ContentType_get operation. */
export interface ContentTypeGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ContentType_createOrUpdate operation. */
export interface ContentTypeCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ContentItem_getEntityTag operation. */
export interface ContentItemGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ContentItem_get operation. */
export interface ContentItemGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ContentItem_createOrUpdate operation. */
export interface ContentItemCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for DeletedServices_purge operation. */
export interface DeletedServicesPurgeHeaders {
  location?: string;
}

/** Defines headers for ApiManagementService_restore operation. */
export interface ApiManagementServiceRestoreHeaders {
  location?: string;
}

/** Defines headers for ApiManagementService_backup operation. */
export interface ApiManagementServiceBackupHeaders {
  location?: string;
}

/** Defines headers for ApiManagementService_update operation. */
export interface ApiManagementServiceUpdateHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for ApiManagementService_delete operation. */
export interface ApiManagementServiceDeleteHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for ApiManagementService_migrateToStv2 operation. */
export interface ApiManagementServiceMigrateToStv2Headers {
  location?: string;
}

/** Defines headers for ApiManagementService_applyNetworkConfigurationUpdates operation. */
export interface ApiManagementServiceApplyNetworkConfigurationUpdatesHeaders {
  location?: string;
}

/** Defines headers for Diagnostic_getEntityTag operation. */
export interface DiagnosticGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Diagnostic_get operation. */
export interface DiagnosticGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Diagnostic_createOrUpdate operation. */
export interface DiagnosticCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Diagnostic_update operation. */
export interface DiagnosticUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Documentation_getEntityTag operation. */
export interface DocumentationGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Documentation_get operation. */
export interface DocumentationGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Documentation_createOrUpdate operation. */
export interface DocumentationCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Documentation_update operation. */
export interface DocumentationUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for EmailTemplate_getEntityTag operation. */
export interface EmailTemplateGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for EmailTemplate_get operation. */
export interface EmailTemplateGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for EmailTemplate_update operation. */
export interface EmailTemplateUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for ApiGatewayConfigConnection_delete operation. */
export interface ApiGatewayConfigConnectionDeleteHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for Gateway_getEntityTag operation. */
export interface GatewayGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Gateway_get operation. */
export interface GatewayGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Gateway_createOrUpdate operation. */
export interface GatewayCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Gateway_update operation. */
export interface GatewayUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Gateway_listKeys operation. */
export interface GatewayListKeysHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayHostnameConfiguration_getEntityTag operation. */
export interface GatewayHostnameConfigurationGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayHostnameConfiguration_get operation. */
export interface GatewayHostnameConfigurationGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayHostnameConfiguration_createOrUpdate operation. */
export interface GatewayHostnameConfigurationCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayApi_getEntityTag operation. */
export interface GatewayApiGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayCertificateAuthority_getEntityTag operation. */
export interface GatewayCertificateAuthorityGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayCertificateAuthority_get operation. */
export interface GatewayCertificateAuthorityGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for GatewayCertificateAuthority_createOrUpdate operation. */
export interface GatewayCertificateAuthorityCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Group_getEntityTag operation. */
export interface GroupGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Group_get operation. */
export interface GroupGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Group_createOrUpdate operation. */
export interface GroupCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Group_update operation. */
export interface GroupUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for IdentityProvider_getEntityTag operation. */
export interface IdentityProviderGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for IdentityProvider_get operation. */
export interface IdentityProviderGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for IdentityProvider_createOrUpdate operation. */
export interface IdentityProviderCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for IdentityProvider_update operation. */
export interface IdentityProviderUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for IdentityProvider_listSecrets operation. */
export interface IdentityProviderListSecretsHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Issue_get operation. */
export interface IssueGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Logger_getEntityTag operation. */
export interface LoggerGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Logger_get operation. */
export interface LoggerGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Logger_createOrUpdate operation. */
export interface LoggerCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Logger_update operation. */
export interface LoggerUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for NamedValue_getEntityTag operation. */
export interface NamedValueGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for NamedValue_get operation. */
export interface NamedValueGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for NamedValue_createOrUpdate operation. */
export interface NamedValueCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
  /** Location header contains the URL where the status of the long running operation can be checked */
  location?: string;
  /** Azure-AsyncOperation header contains the URL where the status of the long running operation can be checked */
  azureAsyncOperation?: string;
}

/** Defines headers for NamedValue_update operation. */
export interface NamedValueUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for NamedValue_listValue operation. */
export interface NamedValueListValueHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for NamedValue_refreshSecret operation. */
export interface NamedValueRefreshSecretHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for OpenIdConnectProvider_getEntityTag operation. */
export interface OpenIdConnectProviderGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for OpenIdConnectProvider_get operation. */
export interface OpenIdConnectProviderGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for OpenIdConnectProvider_createOrUpdate operation. */
export interface OpenIdConnectProviderCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for OpenIdConnectProvider_update operation. */
export interface OpenIdConnectProviderUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for OpenIdConnectProvider_listSecrets operation. */
export interface OpenIdConnectProviderListSecretsHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Policy_getEntityTag operation. */
export interface PolicyGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Policy_get operation. */
export interface PolicyGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Policy_createOrUpdate operation. */
export interface PolicyCreateOrUpdateHeaders {
  /** Current entity state version */
  eTag?: string;
}

/** Defines headers for PolicyFragment_getEntityTag operation. */
export interface PolicyFragmentGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PolicyFragment_get operation. */
export interface PolicyFragmentGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PolicyFragment_createOrUpdate operation. */
export interface PolicyFragmentCreateOrUpdateHeaders {
  /** Current entity state version */
  eTag?: string;
  /** Location header contains the URL where the status of the long running operation can be checked */
  location?: string;
  /** Azure-AsyncOperation header contains the URL where the status of the long running operation can be checked */
  azureAsyncOperation?: string;
}

/** Defines headers for PolicyRestriction_getEntityTag operation. */
export interface PolicyRestrictionGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PolicyRestriction_get operation. */
export interface PolicyRestrictionGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PolicyRestriction_createOrUpdate operation. */
export interface PolicyRestrictionCreateOrUpdateHeaders {
  /** Current entity state version */
  eTag?: string;
}

/** Defines headers for PolicyRestriction_update operation. */
export interface PolicyRestrictionUpdateHeaders {
  /** Current entity state version */
  eTag?: string;
}

/** Defines headers for PolicyRestrictionValidations_byService operation. */
export interface PolicyRestrictionValidationsByServiceHeaders {
  /** location of the header. */
  location?: string;
}

/** Defines headers for PortalConfig_getEntityTag operation. */
export interface PortalConfigGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PortalConfig_get operation. */
export interface PortalConfigGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PortalRevision_getEntityTag operation. */
export interface PortalRevisionGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PortalRevision_get operation. */
export interface PortalRevisionGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PortalRevision_createOrUpdate operation. */
export interface PortalRevisionCreateOrUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
  /** Location header contains the URL where the status of the long running operation can be checked */
  location?: string;
  /** Azure-AsyncOperation header contains the URL where the status of the long running operation can be checked */
  azureAsyncOperation?: string;
}

/** Defines headers for PortalRevision_update operation. */
export interface PortalRevisionUpdateHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for SignInSettings_getEntityTag operation. */
export interface SignInSettingsGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for SignInSettings_get operation. */
export interface SignInSettingsGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for SignUpSettings_getEntityTag operation. */
export interface SignUpSettingsGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for SignUpSettings_get operation. */
export interface SignUpSettingsGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for DelegationSettings_getEntityTag operation. */
export interface DelegationSettingsGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for DelegationSettings_get operation. */
export interface DelegationSettingsGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for PrivateEndpointConnection_createOrUpdate operation. */
export interface PrivateEndpointConnectionCreateOrUpdateHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for PrivateEndpointConnection_delete operation. */
export interface PrivateEndpointConnectionDeleteHeaders {
  /** Location header */
  location?: string;
}

/** Defines headers for Product_getEntityTag operation. */
export interface ProductGetEntityTagHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. */
  eTag?: string;
}

/** Defines headers for Product_get operation. */
export interface ProductGetHeaders {
  /** Current entity state version. Should be treated as opaque and used to make conditional HTT